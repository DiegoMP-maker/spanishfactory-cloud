#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Vista de herramientas ELE
-------------------------
Este m√≥dulo implementa la interfaz de usuario para las herramientas complementarias
de apoyo al aprendizaje de espa√±ol.
"""

import logging
import streamlit as st
import io
from PIL import Image

from features.herramientas.transcripcion import transcribir_imagen
from features.herramientas.consignas import generar_consigna, guardar_consigna, obtener_historial_consignas
from features.herramientas.imagenes import generar_imagen_dalle
from core.session_manager import get_session_var, set_session_var, get_user_info
from ui.main_layout import mostrar_mensaje_error
from ui.sidebar import mostrar_filtros_herramientas
from utils.file_utils import mostrar_upload_area, procesar_imagen_subida

logger = logging.getLogger(__name__)

def render_view():
    """
    Renderiza la vista de herramientas ELE.
    
    Returns:
        None
    """
    try:
        # T√≠tulo de la p√°gina
        st.markdown("## üõ†Ô∏è Herramientas ELE")
        st.markdown("""
        Herramientas complementarias para facilitar la ense√±anza y el aprendizaje del espa√±ol.
        Selecciona una herramienta en el men√∫ lateral.
        """)
        
        # Obtener herramienta seleccionada del sidebar
        herramienta = mostrar_filtros_herramientas()
        
        # Renderizar la herramienta seleccionada
        if herramienta == "Transcripci√≥n de textos":
            mostrar_herramienta_transcripcion()
        elif herramienta == "Generador de consignas":
            mostrar_herramienta_consignas()
        elif herramienta == "Generador de im√°genes":
            mostrar_herramienta_imagenes()
        else:
            st.warning("Selecciona una herramienta en el men√∫ lateral.")
    except Exception as e:
        logger.error(f"Error renderizando vista de herramientas: {str(e)}")
        st.error(f"Error al cargar la vista de herramientas: {str(e)}")

def mostrar_herramienta_transcripcion():
    """
    Muestra la herramienta de transcripci√≥n de textos manuscritos.
    
    Returns:
        None
    """
    try:
        # T√≠tulo y descripci√≥n
        st.markdown("### üî§ Transcripci√≥n de textos manuscritos")
        st.markdown("""
        Esta herramienta te permite obtener la transcripci√≥n de textos manuscritos o impresos en espa√±ol.
        Sube una imagen que contenga texto y obt√©n su contenido en formato editable.
        """)
        
        # Formulario para subir imagen
        uploaded_file = mostrar_upload_area(
            tipo="imagen",
            key="upload_transcripcion",
            help_text="Sube una imagen clara del texto. Formatos aceptados: JPG, PNG, GIF, BMP"
        )
        
        if uploaded_file:
            # Procesar imagen subida
            image, _ = procesar_imagen_subida(uploaded_file)
            
            if image:
                # Mostrar imagen
                st.image(image, caption="Imagen subida", use_column_width=True)
                
                # Bot√≥n para transcribir
                if st.button("Transcribir texto"):
                    with st.spinner("Transcribiendo texto... Esto puede tardar unos segundos."):
                        # Convertir imagen a bytes
                        img_byte_arr = io.BytesIO()
                        image.save(img_byte_arr, format='PNG')
                        img_byte_arr = img_byte_arr.getvalue()
                        
                        # Llamar a la funci√≥n de transcripci√≥n
                        resultado = transcribir_imagen(img_byte_arr)
                        
                        if resultado and 'error' not in resultado:
                            # Mostrar resultado
                            st.markdown("### Texto transcrito:")
                            st.markdown(f'<div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px;">{resultado["texto"]}</div>', unsafe_allow_html=True)
                            
                            # Guardar en sesi√≥n
                            set_session_var("ultima_transcripcion", resultado["texto"])
                            
                            # Bot√≥n para copiar al portapapeles (mediante JS)
                            st.markdown("""
                            <script>
                            function copyToClipboard(text) {
                                navigator.clipboard.writeText(text).then(function() {
                                    alert('Texto copiado al portapapeles');
                                }, function() {
                                    alert('Error al copiar');
                                });
                            }
                            </script>
                            """, unsafe_allow_html=True)
                            
                            # Bot√≥n para editar en correcci√≥n
                            if st.button("Editar en correcci√≥n"):
                                # Guardar en sesi√≥n para usar en correcci√≥n
                                set_session_var("texto_para_correccion", resultado["texto"])
                                # Cambiar a p√°gina de correcci√≥n
                                set_session_var("current_page", "correccion")
                                st.experimental_rerun()
                        else:
                            # Mostrar error
                            error_msg = resultado.get('error', 'Error al transcribir la imagen. Por favor, int√©ntalo con otra imagen.')
                            mostrar_mensaje_error(error_msg)
        
        # Mostrar √∫ltima transcripci√≥n si existe
        ultima_transcripcion = get_session_var("ultima_transcripcion", None)
        if ultima_transcripcion and not uploaded_file:
            with st.expander("√öltima transcripci√≥n", expanded=False):
                st.markdown(f'<div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px;">{ultima_transcripcion}</div>', unsafe_allow_html=True)
                
                # Bot√≥n para editar en correcci√≥n
                if st.button("Editar en correcci√≥n"):
                    # Guardar en sesi√≥n para usar en correcci√≥n
                    set_session_var("texto_para_correccion", ultima_transcripcion)
                    # Cambiar a p√°gina de correcci√≥n
                    set_session_var("current_page", "correccion")
                    st.experimental_rerun()
        
        # Consejos para mejor resultado
        with st.expander("Consejos para mejor resultado"):
            st.markdown("""
            - Aseg√∫rate de que el texto sea claramente visible en la imagen
            - Evita fondos con mucho ruido o patrones
            - La iluminaci√≥n uniforme mejora la precisi√≥n
            - Si el texto est√° escrito a mano, intenta que sea lo m√°s legible posible
            - Para textos largos, considera dividirlos en m√∫ltiples im√°genes
            """)
    except Exception as e:
        logger.error(f"Error mostrando herramienta de transcripci√≥n: {str(e)}")
        st.error(f"Error al cargar la herramienta de transcripci√≥n: {str(e)}")

def mostrar_herramienta_consignas():
    """
    Muestra la herramienta de generaci√≥n de consignas para ejercicios.
    
    Returns:
        None
    """
    try:
        # T√≠tulo y descripci√≥n
        st.markdown("### üìã Generador de consignas")
        st.markdown("""
        Esta herramienta te permite generar consignas (instrucciones) para ejercicios y actividades
        de espa√±ol como lengua extranjera, adaptadas al nivel y enfoque deseado.
        """)
        
        # Crear dos pesta√±as
        tab1, tab2 = st.tabs(["Generar consigna", "Historial de consignas"])
        
        with tab1:
            mostrar_generador_consignas()
        
        with tab2:
            mostrar_historial_consignas()
    except Exception as e:
        logger.error(f"Error mostrando herramienta de consignas: {str(e)}")
        st.error(f"Error al cargar la herramienta de consignas: {str(e)}")

def mostrar_generador_consignas():
    """
    Muestra el formulario para generar consignas.
    
    Returns:
        None
    """
    try:
        # Formulario para generar consigna
        with st.form("form_consigna"):
            # Selector de nivel
            nivel = st.selectbox(
                "Nivel de espa√±ol",
                ["A1", "A2", "B1", "B2", "C1", "C2"]
            )
            
            # Selector de habilidad
            habilidad = st.selectbox(
                "Habilidad ling√º√≠stica",
                [
                    "Expresi√≥n escrita",
                    "Expresi√≥n oral",
                    "Comprensi√≥n lectora",
                    "Comprensi√≥n auditiva",
                    "Interacci√≥n oral",
                    "Todas las habilidades"
                ]
            )
            
            # Selector de tipo de actividad
            tipo_actividad = st.selectbox(
                "Tipo de actividad",
                [
                    "Redacci√≥n",
                    "Debate/Discusi√≥n",
                    "Lectura y preguntas",
                    "Role-play",
                    "Ejercicio gramatical",
                    "Vocabulario",
                    "Pronunciaci√≥n",
                    "Juego did√°ctico",
                    "Actividad cultural"
                ]
            )
            
            # Tema
            tema = st.text_input(
                "Tema espec√≠fico (opcional)",
                placeholder="Ej: Viajes, comida, tecnolog√≠a, rutina diaria, etc."
            )
            
            # Duraci√≥n aproximada
            duracion = st.slider(
                "Duraci√≥n aproximada (minutos)",
                min_value=5,
                max_value=60,
                value=20,
                step=5
            )
            
            # Instrucciones adicionales
            instrucciones = st.text_area(
                "Instrucciones adicionales (opcional)",
                placeholder="Ej: Incluir vocabulario espec√≠fico, enfocarse en ciertos tiempos verbales, etc."
            )
            
            # Bot√≥n de env√≠o
            submitted = st.form_submit_button("Generar consigna")
            
            if submitted:
                with st.spinner("Generando consigna... Esto puede tardar unos segundos."):
                    # Preparar par√°metros
                    parametros = {
                        "nivel": nivel,
                        "habilidad": habilidad,
                        "tipo_actividad": tipo_actividad,
                        "tema": tema if tema else None,
                        "duracion": duracion,
                        "instrucciones": instrucciones if instrucciones else None
                    }
                    
                    # Obtener UID del usuario
                    user_info = get_user_info()
                    uid = user_info.get('uid', None) if user_info else None
                    
                    # Llamar a la funci√≥n de generaci√≥n
                    resultado = generar_consigna(parametros)
                    
                    if resultado and 'error' not in resultado:
                        # Mostrar resultado
                        st.markdown("### Consigna generada:")
                        st.markdown(f'<div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px;">{resultado["consigna"]}</div>', unsafe_allow_html=True)
                        
                        # Guardar en sesi√≥n
                        set_session_var("ultima_consigna", resultado["consigna"])
                        
                        # Guardar en historial si hay usuario
                        if uid and not user_info.get('es_anonimo', False):
                            # Datos para guardar
                            datos_guardar = {
                                "uid": uid,
                                "consigna": resultado["consigna"],
                                "parametros": parametros,
                                "fecha": resultado.get("fecha", None)
                            }
                            
                            # Guardar en Firebase
                            guardar_consigna(datos_guardar)
                        
                        # Bot√≥n para usar en ejercicios
                        if st.button("Crear ejercicio con esta consigna"):
                            # Guardar en sesi√≥n para usar en ejercicios
                            set_session_var("consigna_para_ejercicio", resultado["consigna"])
                            # Cambiar a p√°gina de ejercicios
                            set_session_var("current_page", "ejercicios")
                            st.experimental_rerun()
                    else:
                        # Mostrar error
                        error_msg = resultado.get('error', 'Error al generar la consigna. Por favor, int√©ntalo de nuevo.')
                        mostrar_mensaje_error(error_msg)
        
        # Mostrar √∫ltima consigna si existe
        ultima_consigna = get_session_var("ultima_consigna", None)
        if ultima_consigna and not submitted:
            with st.expander("√öltima consigna generada", expanded=False):
                st.markdown(f'<div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px;">{ultima_consigna}</div>', unsafe_allow_html=True)
                
                # Bot√≥n para usar en ejercicios
                if st.button("Crear ejercicio con esta consigna"):
                    # Guardar en sesi√≥n para usar en ejercicios
                    set_session_var("consigna_para_ejercicio", ultima_consigna)
                    # Cambiar a p√°gina de ejercicios
                    set_session_var("current_page", "ejercicios")
                    st.experimental_rerun()
    except Exception as e:
        logger.error(f"Error mostrando generador de consignas: {str(e)}")
        st.error(f"Error al cargar el generador: {str(e)}")

def mostrar_historial_consignas():
    """
    Muestra el historial de consignas generadas.
    
    Returns:
        None
    """
    try:
        # Obtener UID del usuario
        user_info = get_user_info()
        uid = user_info.get('uid', None) if user_info else None
        
        if not uid or user_info.get('es_anonimo', False):
            st.info("Para guardar y ver tu historial de consignas, necesitas iniciar sesi√≥n o crear una cuenta.")
            return
        
        # Obtener historial
        with st.spinner("Cargando historial..."):
            consignas = obtener_historial_consignas(uid)
        
        if not consignas:
            st.info("No tienes consignas guardadas. Genera tu primera consigna para verla aqu√≠.")
            return
        
        # Mostrar n√∫mero total
        st.markdown(f"#### Historial de consignas ({len(consignas)})")
        
        # Mostrar cada consigna en un expander
        for i, consigna_data in enumerate(consignas):
            # Extraer datos
            consigna = consigna_data.get('consigna', '')
            parametros = consigna_data.get('parametros', {})
            fecha = consigna_data.get('fecha', '')
            
            # Formato para el t√≠tulo del expander
            nivel = parametros.get('nivel', 'No especificado')
            tipo = parametros.get('tipo_actividad', 'No especificado')
            tema = parametros.get('tema', 'General')
            
            titulo_expander = f"{tipo} - Nivel {nivel} - Tema: {tema}"
            
            with st.expander(titulo_expander):
                # Mostrar detalles
                st.markdown(f"**Fecha:** {fecha}")
                st.markdown(f"**Nivel:** {nivel}")
                st.markdown(f"**Habilidad:** {parametros.get('habilidad', 'No especificada')}")
                st.markdown(f"**Tipo:** {tipo}")
                
                # Mostrar consigna
                st.markdown("##### Consigna:")
                st.markdown(f'<div style="background-color: #f8f9fa; padding: 10px; border-radius: 5px;">{consigna}</div>', unsafe_allow_html=True)
                
                # Bot√≥n para usar en ejercicios
                if st.button("Crear ejercicio con esta consigna", key=f"btn_ejercicio_{i}"):
                    # Guardar en sesi√≥n para usar en ejercicios
                    set_session_var("consigna_para_ejercicio", consigna)
                    # Cambiar a p√°gina de ejercicios
                    set_session_var("current_page", "ejercicios")
                    st.experimental_rerun()
    except Exception as e:
        logger.error(f"Error mostrando historial de consignas: {str(e)}")
        st.error(f"Error al cargar el historial: {str(e)}")

def mostrar_herramienta_imagenes():
    """
    Muestra la herramienta de generaci√≥n de im√°genes para descripci√≥n.
    
    Returns:
        None
    """
    try:
        # T√≠tulo y descripci√≥n
        st.markdown("### üñºÔ∏è Generador de im√°genes para descripci√≥n")
        st.markdown("""
        Esta herramienta te permite generar im√°genes para utilizar en ejercicios de descripci√≥n en espa√±ol.
        Las im√°genes pueden servir como est√≠mulo visual para practicar vocabulario, tiempos verbales y expresiones.
        """)
        
        # Formulario para generar imagen
        with st.form("form_imagen"):
            # Selector de nivel
            nivel = st.selectbox(
                "Nivel de espa√±ol",
                ["A1", "A2", "B1", "B2", "C1", "C2"]
            )
            
            # Tema o categor√≠a
            categoria = st.selectbox(
                "Categor√≠a",
                [
                    "Paisaje urbano",
                    "Paisaje natural",
                    "Situaciones cotidianas",
                    "Profesiones y trabajos",
                    "Comida y gastronom√≠a",
                    "Viajes y transportes",
                    "Tecnolog√≠a",
                    "Arte y cultura",
                    "Deportes",
                    "Festividades y celebraciones"
                ]
            )
            
            # Descripci√≥n de la imagen
            descripcion = st.text_area(
                "Descripci√≥n de la imagen",
                placeholder="Describe la imagen que quieres generar. S√© espec√≠fico para obtener mejores resultados.",
                height=100
            )
            
            # Estilo art√≠stico
            estilo = st.selectbox(
                "Estilo art√≠stico",
                [
                    "Realista",
                    "Dibujo animado",
                    "Ilustraci√≥n digital",
                    "Acuarela",
                    "Boceto",
                    "Minimalista",
                    "Fotorrealista"
                ]
            )
            
            # Opciones avanzadas
            with st.expander("Opciones avanzadas"):
                col1, col2 = st.columns(2)
                
                with col1:
                    resolucion = st.select_slider(
                        "Resoluci√≥n",
                        options=["Baja", "Media", "Alta"],
                        value="Media"
                    )
                
                with col2:
                    elementos = st.text_input(
                        "Elementos adicionales (opcional)",
                        placeholder="Ej: personas, animales, objetos espec√≠ficos..."
                    )
            
            # Bot√≥n de env√≠o
            submitted = st.form_submit_button("Generar imagen")
            
            if submitted:
                if not descripcion:
                    st.warning("Por favor, proporciona una descripci√≥n para la imagen.")
                else:
                    with st.spinner("Generando imagen... Esto puede tardar hasta 30 segundos."):
                        # Preparar prompt completo
                        prompt = f"{descripcion}"
                        
                        if elementos:
                            prompt += f". Incluir los siguientes elementos: {elementos}"
                        
                        # Ajustar prompt seg√∫n nivel y estilo
                        prompt += f". Estilo: {estilo}"
                        
                        # Convertir resoluci√≥n a tama√±o
                        if resolucion == "Baja":
                            size = "256x256"
                        elif resolucion == "Media":
                            size = "512x512"
                        else:
                            size = "1024x1024"
                        
                        # Llamar a la funci√≥n de generaci√≥n
                        resultado = generar_imagen_dalle(prompt, size)
                        
                        if resultado and 'error' not in resultado:
                            # Mostrar imagen generada
                            st.markdown("### Imagen generada:")
                            
                            # Mostrar imagen desde URL
                            st.image(resultado["url"], caption="Imagen generada con DALL-E", use_column_width=True)
                            
                            # Guardar en sesi√≥n
                            set_session_var("ultima_imagen_url", resultado["url"])
                            set_session_var("ultima_imagen_prompt", prompt)
                            
                            # Bot√≥n para crear ejercicio de descripci√≥n
                            if st.button("Crear ejercicio de descripci√≥n con esta imagen"):
                                # Preparar consigna autom√°tica
                                consigna_auto = f"""
                                ## Ejercicio de descripci√≥n - Nivel {nivel}
                                
                                ### Instrucciones:
                                1. Observa detenidamente la imagen.
                                2. Escribe una descripci√≥n detallada en espa√±ol de lo que ves.
                                3. Utiliza el vocabulario y estructuras gramaticales apropiadas para tu nivel.
                                
                                **Tiempo recomendado:** 15-20 minutos
                                
                                **Sugerencias:**
                                - Describe los elementos principales de la imagen
                                - Menciona colores, formas y posiciones
                                - Si hay personas, describe su apariencia y posibles acciones
                                - Utiliza conectores para organizar tu descripci√≥n
                                - Revisa tu texto al finalizar
                                """
                                
                                # Guardar en sesi√≥n para usar en ejercicios
                                set_session_var("consigna_para_ejercicio", consigna_auto)
                                set_session_var("imagen_para_ejercicio", resultado["url"])
                                # Cambiar a p√°gina de ejercicios
                                set_session_var("current_page", "ejercicios")
                                st.experimental_rerun()
                            
                            # Bot√≥n para regenerar con prompt similar
                            if st.button("Regenerar con prompt similar"):
                                # Mostrar formulario con el mismo prompt
                                set_session_var("regenerar_imagen_prompt", prompt)
                                st.experimental_rerun()
                        else:
                            # Mostrar error
                            error_msg = resultado.get('error', 'Error al generar la imagen. Por favor, intenta con otra descripci√≥n.')
                            mostrar_mensaje_error(error_msg)
        
        # Verificar si hay un prompt para regenerar
        regenerar_prompt = get_session_var("regenerar_imagen_prompt", None)
        if regenerar_prompt:
            # Limpiar para no regenerar autom√°ticamente
            set_session_var("regenerar_imagen_prompt", None)
            # Llenar el formulario con el prompt anterior
            st.info(f"Prompt anterior: {regenerar_prompt}")
        
        # Mostrar √∫ltima imagen si existe
        ultima_imagen_url = get_session_var("ultima_imagen_url", None)
        ultima_imagen_prompt = get_session_var("ultima_imagen_prompt", None)
        
        if ultima_imagen_url and ultima_imagen_prompt and not submitted:
            with st.expander("√öltima imagen generada", expanded=False):
                st.image(ultima_imagen_url, caption="√öltima imagen generada", use_column_width=True)
                st.markdown(f"**Prompt:** {ultima_imagen_prompt}")
                
                # Bot√≥n para crear ejercicio de descripci√≥n
                if st.button("Crear ejercicio con esta imagen"):
                    # Preparar consigna autom√°tica para nivel B1 (por defecto)
                    consigna_auto = f"""
                    ## Ejercicio de descripci√≥n - Nivel B1
                    
                    ### Instrucciones:
                    1. Observa detenidamente la imagen.
                    2. Escribe una descripci√≥n detallada en espa√±ol de lo que ves.
                    3. Utiliza el vocabulario y estructuras gramaticales apropiadas para tu nivel.
                    
                    **Tiempo recomendado:** 15-20 minutos
                    
                    **Sugerencias:**
                    - Describe los elementos principales de la imagen
                    - Menciona colores, formas y posiciones
                    - Si hay personas, describe su apariencia y posibles acciones
                    - Utiliza conectores para organizar tu descripci√≥n
                    - Revisa tu texto al finalizar
                    """
                    
                    # Guardar en sesi√≥n para usar en ejercicios
                    set_session_var("consigna_para_ejercicio", consigna_auto)
                    set_session_var("imagen_para_ejercicio", ultima_imagen_url)
                    # Cambiar a p√°gina de ejercicios
                    set_session_var("current_page", "ejercicios")
                    st.experimental_rerun()
        
        # Consejos para mejores resultados
        with st.expander("Consejos para mejores resultados"):
            st.markdown("""
            - **S√© espec√≠fico** en tu descripci√≥n. "Un paisaje de monta√±a" dar√° resultados menos precisos que "Un paisaje de monta√±as nevadas con un lago azul y √°rboles verdes al atardecer".
            - **Menciona elementos clave** que quieres que aparezcan en la imagen.
            - **Especifica el estilo art√≠stico** deseado para obtener resultados m√°s coherentes.
            - **Adapta la complejidad** de la imagen al nivel de los estudiantes.
            - **Evita descripciones contradictorias** o demasiado abstractas.
            - Si no obtienes el resultado deseado, intenta **regenerar** con una descripci√≥n ligeramente modificada.
            """)
    except Exception as e:
        logger.error(f"Error mostrando herramienta de im√°genes: {str(e)}")
        st.error(f"Error al cargar la herramienta de generaci√≥n de im√°genes: {str(e)}")
