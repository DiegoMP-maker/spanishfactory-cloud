#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
M√≥dulo de correcci√≥n de textos
-----------------------------
Este m√≥dulo contiene funciones para procesar y corregir textos en espa√±ol.
"""

import logging
import json
import re
import traceback
import streamlit as st

from core.openai_integration import process_with_assistant
from core.circuit_breaker import circuit_breaker
from core.session_manager import get_user_info, get_session_var
from config.settings import NIVELES_ESPANOL
from config.settings import IS_DEV  

logger = logging.getLogger(__name__)

# Definici√≥n local de get_student_profile para eliminar dependencia externa
def get_student_profile(user_id):
    """
    Obtiene el perfil completo del estudiante desde Firebase.
    
    Args:
        user_id (str): ID del usuario
        
    Returns:
        dict: Perfil del estudiante o diccionario vac√≠o si no est√° disponible
    """
    if not user_id:
        logger.warning("User ID vac√≠o en get_student_profile")
        return {}
    
    try:
        # Importar din√°micamente para evitar dependencias circulares
        from core.firebase_client import get_user_data
        
        # Obtener datos del usuario con log detallado
        logger.info(f"Obteniendo datos de usuario para UID: {user_id}")
        user_data = get_user_data(user_id)
        
        # Verificar si se obtuvo alg√∫n dato
        if not user_data:
            logger.warning(f"No se encontraron datos para el usuario {user_id} en Firebase")
            return {}
            
        # Log para depuraci√≥n
        logger.info(f"Datos obtenidos de Firebase: {json.dumps({k: v for k, v in user_data.items() if k not in ['private_key', 'key']})}")
        
        # Verificar campos cr√≠ticos en datos obtenidos
        if "nivel" not in user_data:
            logger.warning(f"Campo 'nivel' no encontrado en datos de usuario de Firebase")
        if "numero_correcciones" not in user_data:
            logger.warning(f"Campo 'numero_correcciones' no encontrado en datos de usuario de Firebase")
        
        # Extraer informaci√≥n relevante para el perfil con una correlaci√≥n expl√≠cita
        # El mapeo claro entre campos de Firebase y campos del perfil evita confusiones
        profile = {
            # Mapeo expl√≠cito de "nivel" a "nivel_mcer"
            "nivel_mcer": user_data.get("nivel", "B1"),
            "idioma_nativo": user_data.get("idioma_nativo", ""),
            "objetivos_aprendizaje": user_data.get("objetivos_aprendizaje", []),
            "areas_interes": user_data.get("areas_interes", []),
            "numero_correcciones": user_data.get("numero_correcciones", 0)
        }
        
        # Log detallado para ver qu√© valores se est√°n usando (reales o por defecto)
        logger.info(f"Perfil construido: nivel_mcer={profile['nivel_mcer']} (por defecto: {'S√≠' if 'nivel' not in user_data else 'No'})")
        logger.info(f"Perfil construido: numero_correcciones={profile['numero_correcciones']} (por defecto: {'S√≠' if 'numero_correcciones' not in user_data else 'No'})")
        
        # A√±adir estad√≠sticas de errores si est√°n disponibles
        if "errores_por_tipo" in user_data:
            profile["estadisticas_errores"] = user_data["errores_por_tipo"]
            
        # A√±adir preferencias de feedback si est√°n disponibles
        if "preferencias_feedback" in user_data:
            profile["preferencias_feedback"] = user_data["preferencias_feedback"]
        
        # Asegurar que el usuario tenga todos los campos necesarios para futuras correcciones
        try:
            from core.firebase_client import ensure_profile_fields
            ensure_profile_fields(user_id)
        except Exception as e:
            logger.warning(f"No se pudieron asegurar campos de perfil: {e}")
            
        return profile
    
    except Exception as e:
        error_details = traceback.format_exc()
        logger.error(f"Error obteniendo perfil del estudiante: {str(e)}")
        logger.debug(f"Detalles del error:\n{error_details}")
        return {}

# System prompt completo para el asistente de correcci√≥n
SYSTEM_PROMPT_CORRECTION = """üß© Contexto:
Eres un experto corrector de textos para estudiantes de Espa√±ol como Lengua Extranjera (ELE). 

INSTRUCCI√ìN FUNDAMENTAL: ANTES de cada evaluaci√≥n, consulta siempre el documento "base_criterios_evaluacion_niveles_mcer.md" (vs_680e701439748191be95055ca9f55531) para asegurar una evaluaci√≥n rigurosa y consistente seg√∫n los niveles del MCER. Los criterios de ese documento son tu gu√≠a oficial de evaluaci√≥n.

Tu tarea es analizar, corregir y explicar los errores del texto respetando rigurosamente la estructura JSON solicitada.
Debes aplicar criterios estrictos y objetivos seg√∫n el nivel MCER (A1-C2) declarado, sin ser excesivamente indulgente y manteniendo est√°ndares acad√©micos apropiados.

üìä Informaci√≥n de perfil:
Debes prestar especial atenci√≥n a los mensajes que contienen "PERFIL DEL ESTUDIANTE" o "CONTEXTO DEL ESTUDIANTE", que incluyen informaci√≥n crucial como:
- Nivel MCER (A1 a C2)
- Idioma nativo del estudiante
- Objetivos de aprendizaje espec√≠ficos
- √Åreas de inter√©s tem√°tico
- Estad√≠sticas de errores previos (√°reas problem√°ticas)
- Preferencias de feedback
- N√∫mero de correcciones previas

üìã CRITERIOS ESTRICTOS DE EVALUACI√ìN POR NIVEL:
Debes aplicar rigurosamente los criterios del documento de referencia knowledge_base_criterios_evaluacion_niveles_mcer.md, que define claramente:

- Lo que es aceptable e inaceptable para cada nivel MCER
- Las puntuaciones m√°ximas seg√∫n nivel y cantidad de errores
- Ejemplos concretos de errores cr√≠ticos por nivel
- Gu√≠as para la identificaci√≥n correcta del tipo de texto

üë®‚Äçüè´ Rol:
Act√∫as como evaluador cr√≠tico pero constructivo de ELE, y tu misi√≥n es detectar errores y brindar explicaciones claras y pedag√≥gicas. Los tipos de errores a identificar y clasificar son:

Gram√°tica: errores de conjugaci√≥n, concordancia, uso incorrecto de tiempos verbales, preposiciones, art√≠culos, etc.

L√©xico: vocabulario inadecuado, falsos amigos, colocaciones incorrectas, repeticiones innecesarias, etc.

Puntuaci√≥n: comas, puntos, acentos, may√∫sculas, etc.

Estructura textual: organizaci√≥n del texto, p√°rrafos, conectores, etc.

Adicionalmente, debes realizar un an√°lisis contextual con cuatro componentes:

Coherencia: l√≥gica interna del texto, progresi√≥n tem√°tica.

Cohesi√≥n: uso de conectores, referencias, etc.

Registro ling√º√≠stico: formalidad, adecuaci√≥n a la situaci√≥n comunicativa.

Adecuaci√≥n cultural: aspectos socioculturales relevantes.

üìù Instrucciones de correcci√≥n:
Clasifica TODOS los errores detectados en las categor√≠as indicadas dentro del campo "errores" del JSON. No omitas ning√∫n error aunque parezca menor.

IMPORTANTE: Identifica correctamente el tipo de texto (email, narraci√≥n, argumentaci√≥n, etc.) bas√°ndote en su estructura y prop√≥sito, no solo en su contenido.

Para cada error incluye:

fragmento_erroneo: la parte exacta del texto que contiene el error.

correccion: c√≥mo deber√≠a escribirse correctamente.

explicacion: una breve explicaci√≥n pedag√≥gica en el idioma del estudiante, adaptada a su nivel y su idioma nativo.

Respeta estrictamente la estructura JSON siguiente:


OBLIGATORIAMENTE debes entregar tu respuesta siguiendo esta estructura JSON exacta:
{
  "saludo": "string",                // en {idioma} - personalizado para el estudiante
  "tipo_texto": "string",            // en {idioma} - identifica correctamente el formato (email, narraci√≥n, etc.)
  "errores": {
       "Gram√°tica": [
           {
             "fragmento_erroneo": "string",
             "correccion": "string",
             "explicacion": "string"  // en {idioma}
           }
           // m√°s errores de Gram√°tica (o [] si ninguno)
       ],
       "L√©xico": [
           {
             "fragmento_erroneo": "string",
             "correccion": "string",
             "explicacion": "string"  // en {idioma}
           }
       ],
       "Puntuaci√≥n": [
           {
             "fragmento_erroneo": "string",
             "correccion": "string",
             "explicacion": "string"  // en {idioma}
           }
       ],
       "Estructura textual": [
           {
             "fragmento_erroneo": "string",
             "correccion": "string",
             "explicacion": "string"  // en {idioma}
           }
       ]
  },
  "texto_corregido": "string",       // siempre en espa√±ol
  "analisis_contextual": {
       "coherencia": {
           "puntuacion": number,     // del 1 al 10, siguiendo estrictamente la tabla de puntuaciones
           "comentario": "string",   // en {idioma}
           "sugerencias": [          // listado de sugerencias en {idioma}
               "string",
               "string"
           ]
       },
       "cohesion": {
           "puntuacion": number,     // del 1 al 10, siguiendo estrictamente la tabla de puntuaciones
           "comentario": "string",   // en {idioma}
           "sugerencias": [          // listado de sugerencias en {idioma}
               "string",
               "string"
           ]
       },
       "registro_linguistico": {
           "puntuacion": number,     // del 1 al 10, siguiendo estrictamente la tabla de puntuaciones
           "tipo_detectado": "string", // tipo de registro detectado en {idioma}
           "adecuacion": "string",   // evaluaci√≥n de adecuaci√≥n en {idioma}
           "sugerencias": [          // listado de sugerencias en {idioma}
               "string",
               "string"
           ]
       },
       "adecuacion_cultural": {
           "puntuacion": number,     // del 1 al 10, siguiendo estrictamente la tabla de puntuaciones
           "comentario": "string",   // en {idioma}
           "elementos_destacables": [  // elementos culturales destacables en {idioma}
               "string",
               "string"
           ],
           "sugerencias": [          // listado de sugerencias en {idioma}
               "string",
               "string"
           ]
       }
  },
  "consejo_final": "string",         // en espa√±ol
  "fin": "Fin de texto corregido."
}

üü† Penalizaci√≥n de errores seg√∫n perfil del alumno:
S√© estrictamente objetivo y aplica los criterios de evaluaci√≥n seg√∫n el nivel MCER declarado, siguiendo la tabla de m√°ximos de puntuaci√≥n del documento de referencia:

| Nivel | Muchos errores | Errores moderados | Pocos errores |
|-------|----------------|-------------------|---------------|
| A1    | 5/10           | 6/10              | 7/10          |
| A2    | 4/10           | 6/10              | 7/10          |
| B1    | 3/10           | 5/10              | 6/10          |
| B2    | 2/10           | 4/10              | 6/10          |
| C1    | 2/10           | 3/10              | 5/10          |
| C2    | 1/10           | 2/10              | 4/10          |

üå± Adaptaci√≥n del feedback:
- Mant√©n un tono constructivo pero realista. No exageres elogios cuando el texto tiene problemas significativos.
- Identifica patrones de error (errores repetitivos o sistem√°ticos) y dest√°calos claramente.
- Ofrece sugerencias concretas y relevantes al nivel del estudiante.
- Prioriza los errores que impiden la comunicaci√≥n efectiva o que son inapropiados para el nivel declarado.

üå± Consejo final:
El "consejo_final" debe ser siempre en espa√±ol, con tono pedag√≥gico y motivador pero honesto. Resume las √°reas principales que necesitan mejora y proporciona directrices claras para el progreso.


INSTRUCCIONES CR√çTICAS:
- Las explicaciones y comentarios DEBEN estar en el idioma especificado ({idioma}).
- El texto corregido completo SIEMPRE debe estar en espa√±ol.
- El consejo final SIEMPRE debe estar en espa√±ol.
- Adapta tus explicaciones y sugerencias al nivel indicado del estudiante.
- Considera el tipo de texto y el contexto cultural en tu an√°lisis.
- Cada error debe incluir un fragmento espec√≠fico del texto original, no generalidades.
- Las puntuaciones deben basarse en criterios objetivos y ser consistentes con el nivel.
- Sugerencias concretas y aplicables que el estudiante pueda implementar.
- Aseg√∫rate de que el texto corregido mantenga la voz y estilo del estudiante.


OBLIGATORIO: Devuelve tu respuesta solo como un objeto JSON v√°lido, sin texto adicional antes ni despu√©s. El JSON debe contener la palabra "json" para asegurar un procesamiento correcto."""

def corregir_texto(texto_input, nivel, detalle="Intermedio", user_id=None, idioma="espa√±ol"):
    """
    Procesa un texto con el asistente de OpenAI para obtener correcciones.
    
    Args:
        texto_input (str): Texto a corregir
        nivel (str): Nivel de espa√±ol del estudiante
        detalle (str): Nivel de detalle para las correcciones
        user_id (str, opcional): ID del usuario
        idioma (str, opcional): Idioma para las explicaciones
        
    Returns:
        dict: Resultado de la correcci√≥n o diccionario con informaci√≥n de error
    """
    try:
        # Validaci√≥n inicial del texto
        if texto_input is None:
            logger.error("El par√°metro 'texto_input' es None")
            return {
                "error": True,
                "mensaje": "No se proporcion√≥ texto para corregir",
                "texto_original": ""
            }
        
        # Verificar que el texto no est√© vac√≠o
        if not isinstance(texto_input, str):
            logger.error(f"El par√°metro 'texto_input' no es una cadena: {type(texto_input)}")
            texto_input = str(texto_input) if texto_input is not None else ""
            
        if not texto_input.strip():
            logger.warning("Texto vac√≠o para correcci√≥n")
            return {
                "error": True,
                "mensaje": "No se proporcion√≥ texto para corregir",
                "texto_original": texto_input
            }
        
        # Validaci√≥n de nivel
        if not nivel or not isinstance(nivel, str):
            logger.warning(f"Nivel inv√°lido: {nivel}")
            nivel = "B1"  # Valor por defecto
        
        # Obtener informaci√≥n adicional del perfil del usuario si est√° disponible
        perfil_usuario = {}
        if user_id:
            try:
                perfil_usuario = get_student_profile(user_id)
                logger.info(f"Informaci√≥n de perfil recuperada para usuario {user_id}")
            except Exception as profile_error:
                logger.warning(f"No se pudo obtener perfil del usuario: {str(profile_error)}")
        
        # Preparar mensaje para el asistente
        try:
            # Enriquecer el mensaje con informaci√≥n contextual del perfil
            info_contextual = ""
            if perfil_usuario:
                # A√±adir solo info relevante directamente en el mensaje
                info_contextual = f"""
CONTEXTO DEL ESTUDIANTE:
- Nivel MCER: {nivel}
- Idioma nativo: {perfil_usuario.get('idioma_nativo', 'No especificado')}
- Correcciones previas: {perfil_usuario.get('numero_correcciones', 0)}
"""
                # A√±adir info de errores frecuentes si est√° disponible
                if "estadisticas_errores" in perfil_usuario:
                    errores = perfil_usuario["estadisticas_errores"]
                    info_contextual += "- √Åreas de mejora: "
                    areas_mejora = []
                    for tipo, cantidad in errores.items():
                        if cantidad > 0:
                            areas_mejora.append(f"{tipo} ({cantidad})")
                    if areas_mejora:
                        info_contextual += ", ".join(areas_mejora)
                    else:
                        info_contextual += "No hay datos previos"
            
            # El asistente ya tiene instrucciones configuradas, a√±adimos instrucciones espec√≠ficas
            # para la evaluaci√≥n adaptada al nivel
            user_message = f"""
{info_contextual}

Texto para revisar (nivel declarado del estudiante: {nivel}):
"{texto_input}"

Nivel de detalle deseado: {detalle}
Idioma para explicaciones: {idioma}

IMPORTANTE: Al evaluar, considera que los errores deben penalizarse de manera diferente seg√∫n el nivel del estudiante. Un error b√°sico en un estudiante de nivel avanzado debe tener mayor impacto en la puntuaci√≥n que el mismo error en un principiante.

Recuerda responder en formato json seg√∫n las instrucciones.
"""
        except Exception as format_error:
            logger.error(f"Error formateando mensajes: {str(format_error)}")
            # Incluir m√°s detalles del error para facilitar el debug
            error_details = traceback.format_exc()
            logger.debug(f"Detalles del error de formato:\n{error_details}")
            return {
                "error": True, 
                "mensaje": "Error preparando la solicitud.",
                "texto_original": texto_input
            }
        
        # Verificar circuit breaker
        if not circuit_breaker.can_execute("openai"):
            logger.error("Circuit breaker abierto para OpenAI")
            return {
                "error": True, 
                "mensaje": "Servicio temporalmente no disponible. Por favor, int√©ntalo de nuevo m√°s tarde.",
                "texto_original": texto_input
            }
        
        # Procesar con el asistente
        try:
            # Obtener thread_id actual si existe
            thread_id = get_session_var("thread_id")
            
            # Loguear para debug
            logger.info(f"Enviando texto de longitud {len(texto_input)} a procesar")
            
            # Procesar con el asistente usando la nueva interfaz
            # MODIFICACI√ìN: Pasamos el system prompt completo en vez de string vac√≠o
            content, data = process_with_assistant(
                system_message=SYSTEM_PROMPT_CORRECTION,  # Pasamos el system prompt completo
                user_message=user_message,
                task_type="correccion_texto",
                thread_id=thread_id,
                user_id=user_id
            )
            
            # Loguear resultado para debug
            logger.info(f"Recibida respuesta: content={type(content)}, data={type(data) if data is not None else None}")
            
            # Verificar que el system_message ha sido aplicado correctamente
            if data and isinstance(data, dict):
                # Verificar si la respuesta tiene la estructura esperada seg√∫n el system prompt
                estructura_correcta = all(
                    campo in data for campo in ["saludo", "tipo_texto", "errores", "texto_corregido", "analisis_contextual", "consejo_final"]
                )
                if estructura_correcta:
                    logger.info("‚úÖ Verificaci√≥n exitosa: La respuesta contiene la estructura definida en el system prompt")
                else:
                    campos_faltantes = [campo for campo in ["saludo", "tipo_texto", "errores", "texto_corregido", "analisis_contextual", "consejo_final"] if campo not in data]
                    logger.warning(f"‚ùå Verificaci√≥n fallida: Faltan campos en la respuesta: {campos_faltantes}")
            
        except Exception as api_error:
            logger.error(f"Error en API del asistente: {str(api_error)}")
            return {
                "error": True,
                "mensaje": "Error de comunicaci√≥n con el servicio. Por favor, int√©ntalo de nuevo.",
                "texto_original": texto_input
            }
        
        # Validar la respuesta del asistente
        if content is None and data is None:
            logger.error("No se obtuvo respuesta del asistente (content y data son None)")
            return {
                "error": True,
                "mensaje": "No se pudo obtener una respuesta del servicio. Por favor, int√©ntalo de nuevo m√°s tarde.",
                "texto_original": texto_input
            }
        
        # Intentamos extraer la respuesta JSON del contenido
        json_data = None
        
        # Si tenemos data, intentamos usarla primero
        if data is not None and isinstance(data, dict):
            json_data = data
            logger.info("Usando datos del objeto 'data'")
        
        # Si no tenemos data √∫til pero tenemos content, intentamos extraer JSON de √©l
        if (json_data is None or json_data == {}) and content:
            try:
                # Intentar extraer JSON con regex
                logger.info("Intentando extraer JSON del content")
                json_match = re.search(r'```json\s*([\s\S]*?)\s*```', content)
                if json_match:
                    json_str = json_match.group(1)
                    try:
                        json_data = json.loads(json_str)
                        logger.info("JSON extra√≠do correctamente del content con regex")
                    except json.JSONDecodeError as je:
                        logger.warning(f"Error decodificando JSON dentro de bloques de c√≥digo: {str(je)}")
                
                # Si no hay coincidencia, intentar parsear todo el content
                if not json_data:
                    try:
                        json_data = json.loads(content)
                        logger.info("Content completo procesado como JSON")
                    except json.JSONDecodeError as je:
                        logger.warning(f"El content no es un JSON v√°lido: {str(je)}")
                        
                        # √öltimo recurso: buscar cualquier cosa que parezca JSON
                        possible_json = re.search(r'({[\s\S]*})', content)
                        if possible_json:
                            try:
                                json_data = json.loads(possible_json.group(1))
                                logger.info("Extra√≠do posible JSON del content con regex general")
                            except json.JSONDecodeError:
                                logger.warning("No se pudo extraer JSON con regex general")
            except Exception as extract_error:
                logger.error(f"Error extrayendo JSON: {str(extract_error)}")
        
        # Si no pudimos extraer JSON, creamos una respuesta b√°sica
        if not json_data:
            logger.warning("No se pudo extraer JSON v√°lido de la respuesta")
            result = {
                "error": True,
                "mensaje": "No se pudo procesar la respuesta del servicio",
                "texto_original": texto_input,
                "texto_corregido": content if content else "No se gener√≥ correcci√≥n"
            }
            return result
        
        # A√±adir texto original si no est√° incluido
        if "texto_original" not in json_data:
            json_data["texto_original"] = texto_input
            
        # Verificar que tenemos la estructura esperada del JSON
        # El Assistant debe devolver un objeto con la estructura espec√≠fica
        if "errores" not in json_data or not isinstance(json_data.get("errores"), dict):
            logger.warning(f"La estructura de errores no es la esperada: {type(json_data.get('errores', None))}")
            
            # Si errores no es un diccionario pero tenemos el texto corregido,
            # generamos una respuesta b√°sica
            if "texto_corregido" in json_data:
                result = {
                    "texto_original": texto_input,
                    "texto_corregido": json_data["texto_corregido"],
                    "errores": {"Gram√°tica": [], "L√©xico": [], "Puntuaci√≥n": [], "Estructura textual": []},
                    "analisis_contextual": {},
                    "consejo_final": json_data.get("consejo_final", "")
                }
                return result
            else:
                # Si no tenemos ni errores ni texto corregido, es un error
                logger.error("JSON sin estructura esperada y sin texto_corregido")
                return {
                    "error": True,
                    "mensaje": "La respuesta del servicio no tiene el formato esperado",
                    "texto_original": texto_input
                }
        
        # A partir de aqu√≠ tenemos un JSON v√°lido con la estructura esperada
        # Registrar correcci√≥n en Firebase si hay usuario
        if user_id:
            try:
                from core.firebase_client import save_correccion
                
                # Contar errores por categor√≠a
                errores_conteo = {}
                errores = json_data.get("errores", {})
                for categoria, lista_errores in errores.items():
                    errores_conteo[categoria] = len(lista_errores) if isinstance(lista_errores, list) else 0
                
                # Guardar en Firebase
                save_correccion(
                    user_id=user_id,
                    texto_original=texto_input,
                    texto_corregido=json_data.get("texto_corregido", ""),
                    nivel=nivel,
                    errores=errores_conteo,
                    puntuacion=json_data.get("puntuacion", 8.0)  # Usar valor del json o valor por defecto
                )
                
                logger.info(f"Correcci√≥n guardada para usuario {user_id}")
            except Exception as firebase_error:
                logger.error(f"Error guardando correcci√≥n en Firebase: {str(firebase_error)}")
        
        # √âxito - devolver los datos procesados
        logger.info("Procesamiento completado con √©xito")
        return json_data
        
    except Exception as e:
        # Capturar detalles completos del error para diagn√≥stico
        error_details = traceback.format_exc()
        logger.error(f"Error corrigiendo texto: {str(e)}")
        logger.error(f"Detalles del error:\n{error_details}")
        
        # Crear respuesta de error con informaci√≥n √∫til
        error_response = {
            "error": True,
            "mensaje": f"Se produjo un error durante la correcci√≥n: {str(e)}",
            "texto_original": texto_input if 'texto_input' in locals() else "No disponible"
        }
        
        # A√±adir informaci√≥n detallada de depuraci√≥n
        if IS_DEV:
            error_response["debug_info"] = {
                "error_message": str(e),
                "error_type": str(type(e)),
                "traceback": error_details
            }
            
        return error_response

def mostrar_resultado_correccion(resultado):
    """
    Muestra el resultado de la correcci√≥n en la interfaz.
    
    Args:
        resultado (dict): Resultado de la correcci√≥n
        
    Returns:
        None
    """
    try:
        # Importaci√≥n local para evitar importaciones circulares
        from features.correccion_utils import display_correccion_result
        
        # Verificar si hay un error en el resultado
        if not resultado:
            st.error("No se recibi√≥ respuesta del servicio de correcci√≥n")
            return
            
        if "error" in resultado and resultado["error"]:
            mensaje_error = resultado.get("mensaje", "Error desconocido durante la correcci√≥n")
            st.error(mensaje_error)
            
            # Informaci√≥n de depuraci√≥n (solo en desarrollo)
            if "debug_info" in resultado:
                with st.expander("Informaci√≥n de depuraci√≥n"):
                    st.json(resultado["debug_info"])
                    
            # Sugerencias de acciones para el usuario
            st.info("Sugerencias: Intenta con un texto m√°s corto o verifica tu conexi√≥n a internet.")
            
            # Mostrar el texto original si est√° disponible
            if "texto_original" in resultado:
                with st.expander("Tu texto original"):
                    st.write(resultado["texto_original"])
            
            return
        
        # Si no hay error, mostrar el resultado normal
        display_correccion_result(resultado)
        
    except Exception as e:
        # Capturar cualquier error en la visualizaci√≥n
        error_details = traceback.format_exc()
        logger.error(f"Error mostrando resultado: {str(e)}")
        logger.error(f"Detalles del error:\n{error_details}")
        
        # Mostrar mensaje al usuario
        st.error(f"Error mostrando el resultado: {str(e)}")
        
        # Si tenemos el resultado original, intentar mostrar al menos el texto
        if isinstance(resultado, dict):
            if "texto_corregido" in resultado:
                st.subheader("Texto corregido")
                st.write(resultado["texto_corregido"])
            elif "texto_original" in resultado:
                with st.expander("Tu texto original"):
                    st.write(resultado["texto_original"])
