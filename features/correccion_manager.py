#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Controlador del flujo de correcci√≥n de textos
---------------------------------------------
Este m√≥dulo centraliza la l√≥gica de correcci√≥n de textos,
separando claramente las responsabilidades entre la integraci√≥n con
OpenAI, el manejo de datos en Firebase, y la presentaci√≥n al usuario.
"""

import logging
import json
import re
import traceback
import streamlit as st

# Importaciones del proyecto
from core.openai_integration import process_with_assistant, get_user_profile_data
from core.circuit_breaker import circuit_breaker
from core.session_manager import get_user_info, get_session_var, set_session_var
from features.functions_definitions import get_evaluation_criteria

logger = logging.getLogger(__name__)

# System prompt completo para el asistente de correcci√≥n (importado desde correccion.py)
SYSTEM_PROMPT_CORRECTION = """üß© Contexto:
Eres un experto corrector de textos para estudiantes de Espa√±ol como Lengua Extranjera (ELE). 

INSTRUCCI√ìN FUNDAMENTAL: ANTES de cada evaluaci√≥n, consulta siempre el documento "base_criterios_evaluacion_niveles_mcer.md" (vs_680e701439748191be95055ca9f55531) para asegurar una evaluaci√≥n rigurosa y consistente seg√∫n los niveles del MCER. Los criterios de ese documento son tu gu√≠a oficial de evaluaci√≥n.

Tu tarea es analizar, corregir y explicar los errores del texto respetando rigurosamente la estructura JSON solicitada.
Debes aplicar criterios estrictos y objetivos seg√∫n el nivel MCER (A1-C2) declarado, sin ser excesivamente indulgente y manteniendo est√°ndares acad√©micos apropiados.

üìä Informaci√≥n de perfil:
Debes prestar especial atenci√≥n a los mensajes que contienen "PERFIL DEL ESTUDIANTE" o "CONTEXTO DEL ESTUDIANTE", que incluyen informaci√≥n crucial como:
- Nivel MCER (A1 a C2)
- Idioma nativo del estudiante
- Objetivos de aprendizaje espec√≠ficos
- √Åreas de inter√©s tem√°tico
- Estad√≠sticas de errores previos (√°reas problem√°ticas)
- Preferencias de feedback
- N√∫mero de correcciones previas

üìã CRITERIOS ESTRICTOS DE EVALUACI√ìN POR NIVEL:
Debes aplicar rigurosamente los criterios del documento de referencia knowledge_base_criterios_evaluacion_niveles_mcer.md, que define claramente:

- Lo que es aceptable e inaceptable para cada nivel MCER
- Las puntuaciones m√°ximas seg√∫n nivel y cantidad de errores
- Ejemplos concretos de errores cr√≠ticos por nivel
- Gu√≠as para la identificaci√≥n correcta del tipo de texto

üë®‚Äçüè´ Rol:
Act√∫as como evaluador cr√≠tico pero constructivo de ELE, y tu misi√≥n es detectar errores y brindar explicaciones claras y pedag√≥gicas. Los tipos de errores a identificar y clasificar son:

Gram√°tica: errores de conjugaci√≥n, concordancia, uso incorrecto de tiempos verbales, preposiciones, art√≠culos, etc.

L√©xico: vocabulario inadecuado, falsos amigos, colocaciones incorrectas, repeticiones innecesarias, etc.

Puntuaci√≥n: comas, puntos, acentos, may√∫sculas, etc.

Estructura textual: organizaci√≥n del texto, p√°rrafos, conectores, etc.

Adicionalmente, debes realizar un an√°lisis contextual con cuatro componentes:

Coherencia: l√≥gica interna del texto, progresi√≥n tem√°tica.

Cohesi√≥n: uso de conectores, referencias, etc.

Registro ling√º√≠stico: formalidad, adecuaci√≥n a la situaci√≥n comunicativa.

Adecuaci√≥n cultural: aspectos socioculturales relevantes.

üìù Instrucciones de correcci√≥n:
Clasifica TODOS los errores detectados en las categor√≠as indicadas dentro del campo "errores" del JSON. No omitas ning√∫n error aunque parezca menor.

IMPORTANTE: Identifica correctamente el tipo de texto (email, narraci√≥n, argumentaci√≥n, etc.) bas√°ndote en su estructura y prop√≥sito, no solo en su contenido.

Para cada error incluye:

fragmento_erroneo: la parte exacta del texto que contiene el error.

correccion: c√≥mo deber√≠a escribirse correctamente.

explicacion: una breve explicaci√≥n pedag√≥gica en el idioma del estudiante, adaptada a su nivel y su idioma nativo.

Respeta estrictamente la estructura JSON siguiente:


OBLIGATORIAMENTE debes entregar tu respuesta siguiendo esta estructura JSON exacta:
{
  "saludo": "string",                // en {idioma} - personalizado para el estudiante
  "tipo_texto": "string",            // en {idioma} - identifica correctamente el formato (email, narraci√≥n, etc.)
  "errores": {
       "Gram√°tica": [
           {
             "fragmento_erroneo": "string",
             "correccion": "string",
             "explicacion": "string"  // en {idioma}
           }
           // m√°s errores de Gram√°tica (o [] si ninguno)
       ],
       "L√©xico": [
           {
             "fragmento_erroneo": "string",
             "correccion": "string",
             "explicacion": "string"  // en {idioma}
           }
       ],
       "Puntuaci√≥n": [
           {
             "fragmento_erroneo": "string",
             "correccion": "string",
             "explicacion": "string"  // en {idioma}
           }
       ],
       "Estructura textual": [
           {
             "fragmento_erroneo": "string",
             "correccion": "string",
             "explicacion": "string"  // en {idioma}
           }
       ]
  },
  "texto_corregido": "string",       // siempre en espa√±ol
  "analisis_contextual": {
       "coherencia": {
           "puntuacion": number,     // del 1 al 10, siguiendo estrictamente la tabla de puntuaciones
           "comentario": "string",   // en {idioma}
           "sugerencias": [          // listado de sugerencias en {idioma}
               "string",
               "string"
           ]
       },
       "cohesion": {
           "puntuacion": number,     // del 1 al 10, siguiendo estrictamente la tabla de puntuaciones
           "comentario": "string",   // en {idioma}
           "sugerencias": [          // listado de sugerencias en {idioma}
               "string",
               "string"
           ]
       },
       "registro_linguistico": {
           "puntuacion": number,     // del 1 al 10, siguiendo estrictamente la tabla de puntuaciones
           "tipo_detectado": "string", // tipo de registro detectado en {idioma}
           "adecuacion": "string",   // evaluaci√≥n de adecuaci√≥n en {idioma}
           "sugerencias": [          // listado de sugerencias en {idioma}
               "string",
               "string"
           ]
       },
       "adecuacion_cultural": {
           "puntuacion": number,     // del 1 al 10, siguiendo estrictamente la tabla de puntuaciones
           "comentario": "string",   // en {idioma}
           "elementos_destacables": [  // elementos culturales destacables en {idioma}
               "string",
               "string"
           ],
           "sugerencias": [          // listado de sugerencias en {idioma}
               "string",
               "string"
           ]
       }
  },
  "consejo_final": "string",         // en espa√±ol
  "fin": "Fin de texto corregido."
}

üü† Penalizaci√≥n de errores seg√∫n perfil del alumno:
S√© estrictamente objetivo y aplica los criterios de evaluaci√≥n seg√∫n el nivel MCER declarado, siguiendo la tabla de m√°ximos de puntuaci√≥n del documento de referencia:

| Nivel | Muchos errores | Errores moderados | Pocos errores |
|-------|----------------|-------------------|---------------|
| A1    | 5/10           | 6/10              | 7/10          |
| A2    | 4/10           | 6/10              | 7/10          |
| B1    | 3/10           | 5/10              | 6/10          |
| B2    | 2/10           | 4/10              | 6/10          |
| C1    | 2/10           | 3/10              | 5/10          |
| C2    | 1/10           | 2/10              | 4/10          |

üå± Adaptaci√≥n del feedback:
- Mant√©n un tono constructivo pero realista. No exageres elogios cuando el texto tiene problemas significativos.
- Identifica patrones de error (errores repetitivos o sistem√°ticos) y dest√°calos claramente.
- Ofrece sugerencias concretas y relevantes al nivel del estudiante.
- Prioriza los errores que impiden la comunicaci√≥n efectiva o que son inapropiados para el nivel declarado.

üå± Consejo final:
El "consejo_final" debe ser siempre en espa√±ol, con tono pedag√≥gico y motivador pero honesto. Resume las √°reas principales que necesitan mejora y proporciona directrices claras para el progreso.


INSTRUCCIONES CR√çTICAS:
- Las explicaciones y comentarios DEBEN estar en el idioma especificado ({idioma}).
- El texto corregido completo SIEMPRE debe estar en espa√±ol.
- El consejo final SIEMPRE debe estar en espa√±ol.
- Adapta tus explicaciones y sugerencias al nivel indicado del estudiante.
- Considera el tipo de texto y el contexto cultural en tu an√°lisis.
- Cada error debe incluir un fragmento espec√≠fico del texto original, no generalidades.
- Las puntuaciones deben basarse en criterios objetivos y ser consistentes con el nivel.
- Sugerencias concretas y aplicables que el estudiante pueda implementar.
- Aseg√∫rate de que el texto corregido mantenga la voz y estilo del estudiante.


OBLIGATORIO: Devuelve tu respuesta solo como un objeto JSON v√°lido, sin texto adicional antes ni despu√©s. El JSON debe contener la palabra "json" para asegurar un procesamiento correcto."""

def corregir_texto(texto_input, nivel, detalle="Intermedio", user_id=None, idioma="espa√±ol"):
    """
    Procesa un texto para obtener correcciones utilizando OpenAI Assistants v2.
    Implementaci√≥n mejorada con function calling y manejo robusto de errores.
    
    Args:
        texto_input (str): Texto a corregir
        nivel (str): Nivel de espa√±ol del estudiante
        detalle (str): Nivel de detalle para las correcciones
        user_id (str, opcional): ID del usuario
        idioma (str, opcional): Idioma para las explicaciones
        
    Returns:
        dict: Resultado de la correcci√≥n o diccionario con informaci√≥n de error
    """
    try:
        # Validaci√≥n inicial del texto
        if texto_input is None:
            logger.error("El par√°metro 'texto_input' es None")
            return {
                "error": True,
                "mensaje": "No se proporcion√≥ texto para corregir",
                "texto_original": ""
            }
        
        # Verificar que el texto no est√© vac√≠o
        if not isinstance(texto_input, str):
            logger.error(f"El par√°metro 'texto_input' no es una cadena: {type(texto_input)}")
            texto_input = str(texto_input) if texto_input is not None else ""
            
        if not texto_input.strip():
            logger.warning("Texto vac√≠o para correcci√≥n")
            return {
                "error": True,
                "mensaje": "No se proporcion√≥ texto para corregir",
                "texto_original": texto_input
            }
        
        # Validaci√≥n de nivel
        if not nivel or not isinstance(nivel, str):
            logger.warning(f"Nivel inv√°lido: {nivel}")
            nivel = "B1"  # Valor por defecto
        
        # Inicializar thread_id
        thread_id = get_session_var("thread_id")
        
        # Verificar circuit breaker para OpenAI
        if not circuit_breaker.can_execute("openai"):
            logger.error("Circuit breaker abierto para OpenAI")
            return {
                "error": True, 
                "mensaje": "Servicio temporalmente no disponible. Por favor, int√©ntalo de nuevo m√°s tarde.",
                "texto_original": texto_input
            }
        
        # Preparar mensaje para el asistente
        user_message = (
            f"Por favor, corrige el siguiente texto de nivel {nivel}. " 
            f"Nivel de detalle: {detalle}. Idioma para explicaciones: {idioma}.\n\n"
            f"TEXTO PARA CORREGIR:\n\"{texto_input}\"\n\n"
            f"Por favor, analiza y corrige todos los errores. Utiliza la funci√≥n 'get_evaluation_criteria' "
            f"para obtener los criterios espec√≠ficos para este nivel y 'get_user_profile' si necesitas "
            f"informaci√≥n detallada del estudiante."
        )
        
        # Procesar con OpenAI Assistants v2 usando function calling
        logger.info(f"Enviando texto de longitud {len(texto_input)} a procesar")
        content, data = process_with_assistant(
            system_message=SYSTEM_PROMPT_CORRECTION,
            user_message=user_message,
            task_type="correccion_texto",
            thread_id=thread_id,
            user_id=user_id
        )
        
        # Verificar resultado
        logger.info(f"Recibida respuesta: content={type(content)}, data={type(data) if data is not None else None}")
        
        # Si no hay respuesta, devolver error
        if content is None and data is None:
            logger.error("No se obtuvo respuesta del asistente")
            return {
                "error": True,
                "mensaje": "No se pudo obtener una respuesta del servicio. Por favor, int√©ntalo de nuevo m√°s tarde.",
                "texto_original": texto_input
            }
        
        # Si hay un error en los datos, devolverlo
        if isinstance(data, dict) and "error" in data:
            logger.error(f"Error en la respuesta del asistente: {data.get('error')}")
            return {
                "error": True,
                "mensaje": data.get("error", "Error procesando la solicitud"),
                "texto_original": texto_input
            }
        
        # Validar estructura del JSON de respuesta
        if not isinstance(data, dict) or "errores" not in data:
            logger.warning("Respuesta sin estructura esperada")
            
            # Si hay contenido pero no JSON v√°lido, intentar extraer manualmente
            if content:
                # Intentar extraer JSON con regex
                json_match = re.search(r'```(?:json)?\s*([\s\S]*?)\s*```', content)
                if json_match:
                    try:
                        data = json.loads(json_match.group(1))
                        logger.info("JSON extra√≠do con regex de c√≥digo")
                    except json.JSONDecodeError:
                        logger.warning("Error decodificando JSON dentro de bloques de c√≥digo")
                
                # Si no hay coincidencia, intentar parsear todo el contenido
                if not isinstance(data, dict) or "errores" not in data:
                    try:
                        data = json.loads(content)
                        logger.info("Content completo procesado como JSON")
                    except json.JSONDecodeError:
                        logger.warning("El content no es un JSON v√°lido")
            
            # Si a√∫n no tenemos datos v√°lidos, crear estructura m√≠nima
            if not isinstance(data, dict) or "errores" not in data:
                logger.warning("Creando estructura m√≠nima para datos")
                data = {
                    "texto_original": texto_input,
                    "texto_corregido": content if content else "No se gener√≥ correcci√≥n",
                    "errores": {
                        "Gram√°tica": [],
                        "L√©xico": [],
                        "Puntuaci√≥n": [],
                        "Estructura textual": []
                    },
                    "analisis_contextual": {},
                    "consejo_final": "No se pudo generar un consejo espec√≠fico."
                }
        
        # A√±adir texto original si no est√° incluido
        if "texto_original" not in data:
            data["texto_original"] = texto_input
        
        # Verificar que tenemos la estructura completa esperada
        errores_keys = ["Gram√°tica", "L√©xico", "Puntuaci√≥n", "Estructura textual"]
        for key in errores_keys:
            if key not in data.get("errores", {}):
                data.setdefault("errores", {})[key] = []
        
        # Guardar resultado en Firebase si hay usuario
        if user_id:
            try:
                from core.firebase_client import save_correccion
                
                # Contar errores por categor√≠a
                errores_conteo = {}
                errores = data.get("errores", {})
                for categoria, lista_errores in errores.items():
                    errores_conteo[categoria.lower()] = len(lista_errores) if isinstance(lista_errores, list) else 0
                
                # Extraer puntuaci√≥n global (promedio de an√°lisis contextual)
                puntuacion_global = 0
                num_puntuaciones = 0
                
                analisis = data.get("analisis_contextual", {})
                for seccion in ["coherencia", "cohesion", "registro_linguistico", "adecuacion_cultural"]:
                    if seccion in analisis and "puntuacion" in analisis[seccion]:
                        try:
                            puntuacion_global += analisis[seccion]["puntuacion"]
                            num_puntuaciones += 1
                        except (TypeError, ValueError):
                            pass
                
                # Calcular promedio si hay puntuaciones
                if num_puntuaciones > 0:
                    puntuacion_global = round(puntuacion_global / num_puntuaciones, 1)
                else:
                    puntuacion_global = 5.0  # Valor por defecto
                
                # Guardar en Firebase
                correccion_id = save_correccion(
                    user_id=user_id,
                    texto_original=texto_input,
                    texto_corregido=data.get("texto_corregido", ""),
                    nivel=nivel,
                    errores=errores_conteo,
                    puntuacion=puntuacion_global
                )
                
                logger.info(f"Correcci√≥n guardada para usuario {user_id} con ID {correccion_id}")
            except Exception as firebase_error:
                logger.error(f"Error guardando correcci√≥n en Firebase: {str(firebase_error)}")
                logger.debug(traceback.format_exc())
        
        # Registrar √©xito en el circuit breaker
        circuit_breaker.record_success("openai")
        
        # √âxito - devolver los datos procesados
        logger.info("Procesamiento completado con √©xito")
        return data
        
    except Exception as e:
        # Capturar detalles completos del error para diagn√≥stico
        error_details = traceback.format_exc()
        logger.error(f"Error corrigiendo texto: {str(e)}")
        logger.debug(f"Detalles del error:\n{error_details}")
        
        # Registrar fallo en el circuit breaker
        circuit_breaker.record_failure("openai", error_type=str(type(e).__name__))
        
        # Crear respuesta de error con informaci√≥n √∫til
        error_response = {
            "error": True,
            "mensaje": f"Se produjo un error durante la correcci√≥n: {str(e)}",
            "texto_original": texto_input if 'texto_input' in locals() else "No disponible"
        }
        
        # A√±adir informaci√≥n detallada de depuraci√≥n
        from config.settings import IS_DEV
        if IS_DEV:
            error_response["debug_info"] = {
                "error_message": str(e),
                "error_type": str(type(e)),
                "traceback": error_details
            }
            
        return error_response

def mostrar_resultado_correccion(resultado):
    """
    Muestra el resultado de la correcci√≥n en la interfaz.
    Delega la visualizaci√≥n a la funci√≥n display_correccion_result.
    
    Args:
        resultado (dict): Resultado de la correcci√≥n
        
    Returns:
        None
    """
    try:
        # Importaci√≥n local para evitar importaciones circulares
        from features.correccion_utils import display_correccion_result
        
        # Verificar si hay un error en el resultado
        if not resultado:
            st.error("No se recibi√≥ respuesta del servicio de correcci√≥n")
            return
            
        if "error" in resultado and resultado["error"]:
            mensaje_error = resultado.get("mensaje", "Error desconocido durante la correcci√≥n")
            st.error(mensaje_error)
            
            # Informaci√≥n de depuraci√≥n (solo en desarrollo)
            if "debug_info" in resultado:
                with st.expander("Informaci√≥n de depuraci√≥n"):
                    st.json(resultado["debug_info"])
                    
            # Sugerencias de acciones para el usuario
            st.info("Sugerencias: Intenta con un texto m√°s corto o verifica tu conexi√≥n a internet.")
            
            # Mostrar el texto original si est√° disponible
            if "texto_original" in resultado:
                with st.expander("Tu texto original"):
                    st.write(resultado["texto_original"])
            
            return
        
        # Si no hay error, mostrar el resultado normal
        display_correccion_result(resultado)
        
    except Exception as e:
        # Capturar cualquier error en la visualizaci√≥n
        error_details = traceback.format_exc()
        logger.error(f"Error mostrando resultado: {str(e)}")
        logger.debug(f"Detalles del error:\n{error_details}")
        
        # Mostrar mensaje al usuario
        st.error(f"Error mostrando el resultado: {str(e)}")
        
        # Si tenemos el resultado original, intentar mostrar al menos el texto
        if isinstance(resultado, dict):
            if "texto_corregido" in resultado:
                st.subheader("Texto corregido")
                st.write(resultado["texto_corregido"])
            elif "texto_original" in resultado:
                with st.expander("Tu texto original"):
                    st.write(resultado["texto_original"])
