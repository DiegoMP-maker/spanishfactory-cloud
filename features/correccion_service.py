#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Servicio unificado de correcci√≥n de textos
------------------------------------------
Este m√≥dulo unifica la l√≥gica de correcci√≥n de textos usando OpenAI Assistants v2,
garantizando el formato JSON en las respuestas y el correcto uso de function calling.
"""

import logging
import json
import time
import traceback
import streamlit as st

# Importaciones del proyecto
from core.clean_openai_assistant import get_clean_openai_assistants_client, extract_json_safely
from core.session_manager import get_user_info, get_session_var, set_session_var
from core.circuit_breaker import circuit_breaker
from features.functions_definitions import ASSISTANT_FUNCTIONS, get_user_profile
from core.firebase_client import save_correction_with_stats, get_user_data
from core.json_extractor import validate_error_classification

logger = logging.getLogger(__name__)

# System prompt mejorado para el asistente de correcci√≥n con instrucciones expl√≠citas de clasificaci√≥n
SYSTEM_PROMPT_CORRECTION = """üß© Contexto:
Eres un experto corrector de textos para estudiantes de Espa√±ol como Lengua Extranjera (ELE). 

INSTRUCCI√ìN FUNDAMENTAL: ANTES de cada evaluaci√≥n, consulta siempre el documento "base_criterios_evaluacion_niveles_mcer.md" (vs_680e701439748191be95055ca9f55531) para asegurar una evaluaci√≥n rigurosa y consistente seg√∫n los niveles del MCER. Los criterios de ese documento son tu gu√≠a oficial de evaluaci√≥n.

Tu tarea es analizar, corregir y explicar los errores del texto respetando rigurosamente la estructura JSON solicitada.
Debes aplicar criterios estrictos y objetivos seg√∫n el nivel MCER (A1-C2) declarado, sin ser excesivamente indulgente y manteniendo est√°ndares acad√©micos apropiados.

üìä Informaci√≥n de perfil:
Debes prestar especial atenci√≥n a los mensajes que contienen "PERFIL DEL ESTUDIANTE" o "CONTEXTO DEL ESTUDIANTE", que incluyen informaci√≥n crucial como:
- Nivel MCER (A1 a C2)
- Idioma nativo del estudiante
- Objetivos de aprendizaje espec√≠ficos
- √Åreas de inter√©s tem√°tico
- Estad√≠sticas de errores previos (√°reas problem√°ticas)
- Preferencias de feedback
- N√∫mero de correcciones previas

üìã CRITERIOS ESTRICTOS DE EVALUACI√ìN POR NIVEL:
Debes aplicar rigurosamente los criterios del documento de referencia knowledge_base_criterios_evaluacion_niveles_mcer.md, que define claramente:

- Lo que es aceptable e inaceptable para cada nivel MCER
- Las puntuaciones m√°ximas seg√∫n nivel y cantidad de errores
- Ejemplos concretos de errores cr√≠ticos por nivel
- Gu√≠as para la identificaci√≥n correcta del tipo de texto

üë®‚Äçüè´ Rol:
Act√∫as como evaluador cr√≠tico pero constructivo de ELE, y tu misi√≥n es detectar errores y brindar explicaciones claras y pedag√≥gicas.

üîç CLASIFICACI√ìN ESTRICTA DE ERRORES:

Es CR√çTICO que clasifiques correctamente cada error en su categor√≠a espec√≠fica:

1. Gram√°tica: SOLO errores de conjugaci√≥n verbal, concordancia de g√©nero/n√∫mero, uso incorrecto de tiempos verbales, art√≠culos, pronombres y preposiciones.
   Ejemplo correcto: "yo ir" ‚Üí "yo voy" (error de conjugaci√≥n)
   Ejemplo correcto: "los casa" ‚Üí "las casas" (error de concordancia)
   Ejemplo correcto: "voy en Madrid" ‚Üí "voy a Madrid" (error de preposici√≥n)

2. L√©xico: SOLO errores de vocabulario, palabras inexistentes, falsos amigos, confusi√≥n entre palabras similares, palabras mal escritas.
   Ejemplo correcto: "agusto" ‚Üí "agosto" (error l√©xico de palabra mal escrita)
   Ejemplo correcto: "soy embarazada" ‚Üí "estoy embarazada" (falso amigo)
   Ejemplo correcto: "realizar una fiesta" ‚Üí "celebrar una fiesta" (selecci√≥n l√©xica inapropiada)

3. Puntuaci√≥n: SOLO errores de comas, puntos, tildes, may√∫sculas, signos de interrogaci√≥n/exclamaci√≥n.
   Ejemplo correcto: "yo muy feliz" ‚Üí "Yo muy feliz" (error de may√∫scula inicial)
   Ejemplo correcto: "Como estas" ‚Üí "¬øC√≥mo est√°s?" (error de signos y acentuaci√≥n)
   Ejemplo correcto: "fui al cine vi una pel√≠cula" ‚Üí "Fui al cine. Vi una pel√≠cula." (error de puntuaci√≥n)

4. Estructura textual: SOLO errores de organizaci√≥n, p√°rrafos, coherencia global, uso de conectores.
   Ejemplo correcto: "nosotros ir a Malaga es muy calor" ‚Üí "Nosotros vamos a M√°laga. Hace mucho calor" (error de estructura, frases no separadas)
   Ejemplo correcto: "Primero... Luego... Finalmente... Por otro lado..." ‚Üí "Primero... Luego... Por otro lado... Finalmente..." (orden il√≥gico de conectores)

IMPORTANTE: Cada error debe ser clasificado en UNA SOLA categor√≠a. NO repitas el mismo error en m√∫ltiples categor√≠as. Revisa cuidadosamente cada error y col√≥calo en su categor√≠a correcta. NUNCA agrupes todos los errores en una sola categor√≠a.

CR√çTICO - NO INCLUYAS CORRECCIONES VAC√çAS: Si no hay error en alguna de las categor√≠as, simplemente deja la lista vac√≠a ([]). NUNCA incluyas un "error" donde el fragmento_erroneo y la correccion sean exactamente iguales. Tampoco incluyas explicaciones que digan "No se identificaron errores".

ESTRUCTURA TEXTUAL - INSTRUCCI√ìN ESPECIAL: Siempre debes evaluar si el texto podr√≠a beneficiarse de mejoras estructurales. Si el texto carece de conectores o transiciones adecuadas, organizaci√≥n por p√°rrafos o elementos para mejorar coherencia/cohesi√≥n, DEBES proponer al menos una mejora en la categor√≠a "Estructura textual", incluso si no hay errores graves. Por ejemplo:
- Fragmento: "Fui a la playa. Nad√© mucho."
- Correcci√≥n: "Fui a la playa donde nad√© mucho."
- Explicaci√≥n: "Puedes conectar estas ideas usando 'donde' para mejorar la fluidez del texto."

üìù Instrucciones de correcci√≥n:
Clasifica TODOS los errores detectados en las categor√≠as indicadas dentro del campo "errores" del JSON. No omitas ning√∫n error aunque parezca menor.

IMPORTANTE: Identifica correctamente el tipo de texto (email, narraci√≥n, argumentaci√≥n, etc.) bas√°ndote en su estructura y prop√≥sito, no solo en su contenido.

Para cada error incluye:

fragmento_erroneo: la parte exacta del texto que contiene el error.

correccion: c√≥mo deber√≠a escribirse correctamente.

explicacion: una breve explicaci√≥n pedag√≥gica en el idioma del estudiante, adaptada a su nivel y su idioma nativo.

Respeta estrictamente la estructura JSON siguiente:


OBLIGATORIAMENTE debes entregar tu respuesta siguiendo esta estructura JSON exacta:
{
  "saludo": "string",                // en {idioma} - personalizado para el estudiante
  "tipo_texto": "string",            // en {idioma} - identifica correctamente el formato (email, narraci√≥n, etc.)
  "errores": {
       "Gram√°tica": [
           {
             "fragmento_erroneo": "string",
             "correccion": "string",
             "explicacion": "string"  // en {idioma}
           }
           // m√°s errores de Gram√°tica (o [] si ninguno)
       ],
       "L√©xico": [
           {
             "fragmento_erroneo": "string",
             "correccion": "string",
             "explicacion": "string"  // en {idioma}
           }
       ],
       "Puntuaci√≥n": [
           {
             "fragmento_erroneo": "string",
             "correccion": "string",
             "explicacion": "string"  // en {idioma}
           }
       ],
       "Estructura textual": [
           {
             "fragmento_erroneo": "string",
             "correccion": "string",
             "explicacion": "string"  // en {idioma}
           }
       ]
  },
  "texto_corregido": "string",       // siempre en espa√±ol
  "analisis_contextual": {
       "coherencia": {
           "puntuacion": number,     // del 1 al 10, siguiendo estrictamente la tabla de puntuaciones
           "comentario": "string",   // en {idioma}
           "sugerencias": [          // listado de sugerencias en {idioma}
               "string",
               "string"
           ]
       },
       "cohesion": {
           "puntuacion": number,     // del 1 al 10, siguiendo estrictamente la tabla de puntuaciones
           "comentario": "string",   // en {idioma}
           "sugerencias": [          // listado de sugerencias en {idioma}
               "string",
               "string"
           ]
       },
       "registro_linguistico": {
           "puntuacion": number,     // del 1 al 10, siguiendo estrictamente la tabla de puntuaciones
           "tipo_detectado": "string", // tipo de registro detectado en {idioma}
           "adecuacion": "string",   // evaluaci√≥n de adecuaci√≥n en {idioma}
           "sugerencias": [          // listado de sugerencias en {idioma}
               "string",
               "string"
           ]
       },
       "adecuacion_cultural": {
           "puntuacion": number,     // del 1 al 10, siguiendo estrictamente la tabla de puntuaciones
           "comentario": "string",   // en {idioma}
           "elementos_destacables": [  // elementos culturales destacables en {idioma}
               "string",
               "string"
           ],
           "sugerencias": [          // listado de sugerencias en {idioma}
               "string",
               "string"
           ]
       }
  },
  "consejo_final": "string",         // en espa√±ol
  "fin": "Fin de texto corregido."
}

üü† Penalizaci√≥n de errores seg√∫n perfil del alumno:
S√© estrictamente objetivo y aplica los criterios de evaluaci√≥n seg√∫n el nivel MCER declarado, siguiendo la tabla de m√°ximos de puntuaci√≥n del documento de referencia:

| Nivel | Muchos errores | Errores moderados | Pocos errores |
|-------|----------------|-------------------|---------------|
| A1    | 5/10           | 6/10              | 7/10          |
| A2    | 4/10           | 6/10              | 7/10          |
| B1    | 3/10           | 5/10              | 6/10          |
| B2    | 2/10           | 4/10              | 6/10          |
| C1    | 2/10           | 3/10              | 5/10          |
| C2    | 1/10           | 2/10              | 4/10          |

üå± Adaptaci√≥n del feedback:
- Mant√©n un tono constructivo pero realista. No exageres elogios cuando el texto tiene problemas significativos.
- Identifica patrones de error (errores repetitivos o sistem√°ticos) y dest√°calos claramente.
- Ofrece sugerencias concretas y relevantes al nivel del estudiante.
- Prioriza los errores que impiden la comunicaci√≥n efectiva o que son inapropiados para el nivel declarado.

üå± Consejo final:
El "consejo_final" debe ser siempre en espa√±ol, con tono pedag√≥gico y motivador pero honesto. Resume las √°reas principales que necesitan mejora y proporciona directrices claras para el progreso.


INSTRUCCIONES CR√çTICAS:
- Las explicaciones y comentarios DEBEN estar en el idioma especificado ({idioma}).
- El texto corregido completo SIEMPRE debe estar en espa√±ol.
- El consejo final SIEMPRE debe estar en espa√±ol.
- Adapta tus explicaciones y sugerencias al nivel indicado del estudiante.
- Considera el tipo de texto y el contexto cultural en tu an√°lisis.
- Cada error debe incluir un fragmento espec√≠fico del texto original, no generalidades.
- Las puntuaciones deben basarse en criterios objetivos y ser consistentes con el nivel.
- Sugerencias concretas y aplicables que el estudiante pueda implementar.
- Aseg√∫rate de que el texto corregido mantenga la voz y estilo del estudiante.
- Aseg√∫rate que tus clasificaciones de errores son CORRECTAS y PRECISAS. NO clasifiques errores de l√©xico como gram√°tica, o puntuaci√≥n como estructura.
- SIEMPRE prop√≥n mejoras de "Estructura textual" para textos que carezcan de conectores adecuados o buena organizaci√≥n, incluso si no hay errores graves.


OBLIGATORIO: Devuelve tu respuesta solo como un objeto JSON v√°lido, sin texto adicional antes ni despu√©s. El JSON debe contener la palabra "json" para asegurar un procesamiento correcto."""

def obtener_perfil_estudiante(user_id):
    """
    Obtiene el perfil del estudiante de manera robusta.
    
    Args:
        user_id (str): ID del usuario
        
    Returns:
        dict: Perfil del estudiante
    """
    try:
        if not user_id:
            logger.warning("ID de usuario vac√≠o en obtener_perfil_estudiante")
            return {
                "nivel_mcer": "B1",
                "idioma_nativo": "No especificado",
                "estadisticas_errores": {}
            }
        
        # Obtener perfil usando la funci√≥n de funciones_definitions
        perfil = get_user_profile(user_id)
        
        if perfil and "error" not in perfil:
            logger.info(f"Perfil obtenido correctamente para usuario {user_id}")
            return perfil
        
        # Plan B: Obtener datos directamente de Firebase
        user_data = get_user_data(user_id)
        
        if not user_data:
            logger.warning(f"No se pudieron obtener datos para usuario {user_id}")
            return {
                "nivel_mcer": "B1",
                "idioma_nativo": "No especificado",
                "estadisticas_errores": {}
            }
        
        # Construir perfil desde los datos del usuario
        perfil = {
            "nivel_mcer": user_data.get("nivel", "B1"),
            "idioma_nativo": user_data.get("idioma_nativo", "No especificado"),
            "objetivos_aprendizaje": user_data.get("objetivos_aprendizaje", []),
            "areas_interes": user_data.get("areas_interes", []),
            "estadisticas_errores": user_data.get("errores_por_tipo", {}),
            "numero_correcciones": user_data.get("numero_correcciones", 0)
        }
        
        logger.info(f"Perfil construido desde los datos del usuario para {user_id}")
        return perfil
        
    except Exception as e:
        logger.error(f"Error en obtener_perfil_estudiante: {str(e)}")
        return {
            "nivel_mcer": "B1",
            "idioma_nativo": "No especificado",
            "estadisticas_errores": {}
        }

def process_function_calls(assistant_id, thread_id, run_id, client):
    """
    Procesa las llamadas a funciones del asistente.
    
    Args:
        assistant_id (str): ID del asistente
        thread_id (str): ID del thread
        run_id (str): ID de la ejecuci√≥n
        client: Cliente de OpenAI Assistants
        
    Returns:
        bool: True si el procesamiento fue exitoso
    """
    try:
        # Verificar que tenemos un cliente v√°lido
        if not client:
            logger.error("Cliente no v√°lido en process_function_calls")
            return False
        
        # Obtener detalles de la ejecuci√≥n
        run_details = client.get_run(thread_id, run_id)
        
        if "required_action" not in run_details:
            logger.error("La ejecuci√≥n no requiere acci√≥n")
            return False
        
        required_action = run_details["required_action"]
        if "submit_tool_outputs" not in required_action.get("type", ""):
            logger.error(f"Tipo de acci√≥n no soportado: {required_action.get('type')}")
            return False
        
        # Obtener las llamadas a funciones pendientes
        tool_calls = required_action.get("submit_tool_outputs", {}).get("tool_calls", [])
        
        if not tool_calls:
            logger.warning("No hay llamadas a funciones pendientes")
            return False
        
        # Procesar cada llamada a funci√≥n
        tool_outputs = []
        
        for tool_call in tool_calls:
            function_name = tool_call.get("function", {}).get("name")
            function_args = tool_call.get("function", {}).get("arguments", "{}")
            
            # Parsear argumentos
            try:
                args = json.loads(function_args)
            except json.JSONDecodeError:
                logger.error(f"Error al parsear argumentos: {function_args}")
                args = {}
            
            # Ejecutar la funci√≥n correspondiente
            from features.functions_definitions import execute_function
            result = execute_function(function_name, args)
            
            # A√±adir resultado a los outputs
            tool_outputs.append({
                "tool_call_id": tool_call.get("id"),
                "output": json.dumps(result)
            })
        
        # Enviar los resultados a la API
        submit_response = client._api_request(
            "POST",
            f"/threads/{thread_id}/runs/{run_id}/submit_tool_outputs",
            data={"tool_outputs": tool_outputs},
            timeout=60
        )
        
        if not submit_response:
            logger.error("Error al enviar los resultados de las funciones")
            return False
        
        logger.info(f"Resultados de funciones enviados correctamente: {len(tool_outputs)} funciones")
        return True
        
    except Exception as e:
        error_details = traceback.format_exc()
        logger.error(f"Error en process_function_calls: {str(e)}")
        logger.debug(f"Detalles del error:\n{error_details}")
        return False

def corregir_texto(texto_input, nivel, detalle="Intermedio", user_id=None, idioma="espa√±ol"):
    """
    Procesa un texto con OpenAI Assistants v2 para obtener correcciones.
    Implementaci√≥n unificada con mejor manejo de errores y garant√≠a de formato JSON.
    
    Args:
        texto_input (str): Texto a corregir
        nivel (str): Nivel de espa√±ol del estudiante
        detalle (str): Nivel de detalle para las correcciones
        user_id (str, opcional): ID del usuario
        idioma (str, opcional): Idioma para las explicaciones
        
    Returns:
        dict: Resultado de la correcci√≥n o diccionario con informaci√≥n de error
    """
    # Iniciar temporizador para m√©tricas
    start_time = time.time()
    
    try:
        # Validaci√≥n inicial del texto
        if not texto_input or not isinstance(texto_input, str) or not texto_input.strip():
            return {
                "error": True,
                "mensaje": "No se proporcion√≥ texto v√°lido para corregir",
                "texto_original": texto_input if texto_input else ""
            }
        
        # Validaci√≥n de nivel
        if not nivel or not isinstance(nivel, str):
            nivel = "B1"  # Valor por defecto
        
        # Verificar circuit breaker
        if not circuit_breaker.can_execute("openai"):
            return {
                "error": True, 
                "mensaje": "Servicio temporalmente no disponible. Por favor, int√©ntalo de nuevo m√°s tarde.",
                "texto_original": texto_input
            }
        
        # Obtener informaci√≥n de perfil del usuario
        perfil_usuario = obtener_perfil_estudiante(user_id) if user_id else {
            "nivel_mcer": nivel,
            "idioma_nativo": "No especificado",
            "estadisticas_errores": {}
        }
        
        # Personalizar mensaje con informaci√≥n contextual
        info_contextual = f"""
CONTEXTO DEL ESTUDIANTE:
- Nivel MCER: {nivel}
- Idioma nativo: {perfil_usuario.get('idioma_nativo', 'No especificado')}
- Correcciones previas: {perfil_usuario.get('numero_correcciones', 0)}
"""
        # A√±adir info de errores frecuentes si est√° disponible
        if "estadisticas_errores" in perfil_usuario and perfil_usuario["estadisticas_errores"]:
            errores = perfil_usuario["estadisticas_errores"]
            info_contextual += "- √Åreas de mejora: "
            areas_mejora = []
            for tipo, cantidad in errores.items():
                if cantidad > 0:
                    areas_mejora.append(f"{tipo} ({cantidad})")
            if areas_mejora:
                info_contextual += ", ".join(areas_mejora)
            else:
                info_contextual += "No hay datos previos"
        
        # Crear mensaje para el asistente
        user_message = f"""
{info_contextual}

Texto para revisar (nivel declarado del estudiante: {nivel}):
"{texto_input}"

Nivel de detalle deseado: {detalle}
Idioma para explicaciones: {idioma}

IMPORTANTE: 
1. Tu respuesta DEBE ser √öNICAMENTE un objeto JSON v√°lido con la estructura exacta solicitada en tus instrucciones.
2. Al evaluar, considera que los errores deben penalizarse de manera diferente seg√∫n el nivel del estudiante.
3. Un error b√°sico en un estudiante de nivel avanzado debe tener mayor impacto en la puntuaci√≥n que el mismo error en un principiante.
4. NO incluyas texto adicional fuera del JSON. Tu respuesta debe comenzar con '{' y terminar con '}'.
5. CLASIFICA CORRECTAMENTE cada error en su categor√≠a apropiada (Gram√°tica, L√©xico, Puntuaci√≥n o Estructura textual).
6. NO agrupes todos los errores en una sola categor√≠a.
7. Aseg√∫rate de distribuir los errores en todas las categor√≠as que correspondan.
"""
        
        # Obtener cliente de OpenAI Assistants
        client = get_clean_openai_assistants_client()
        if not client:
            return {
                "error": True,
                "mensaje": "No se pudo inicializar el cliente de OpenAI",
                "texto_original": texto_input
            }
        
        # Obtener thread_id actual si existe
        thread_id = get_session_var("thread_id")
        thread_valid = False
        
        # Verificar si el thread es v√°lido
        if thread_id:
            thread_valid = client.verify_thread(thread_id)
            logger.info(f"Thread existente verificado: {thread_id}, v√°lido: {thread_valid}")
        
        # Si no hay thread o no es v√°lido, crear uno nuevo
        if not thread_valid:
            # Crear thread con informaci√≥n del perfil
            thread_response = client.create_thread(user_id=user_id)
            
            if not thread_response or "id" not in thread_response:
                return {
                    "error": True,
                    "mensaje": "No se pudo crear un nuevo thread",
                    "texto_original": texto_input
                }
                
            thread_id = thread_response["id"]
            # Guardar en session_state
            set_session_var("thread_id", thread_id)
            logger.info(f"Nuevo thread creado: {thread_id}")
        else:
            # Si el thread ya existe, considerar actualizarlo con informaci√≥n del perfil
            if user_id:
                # Actualizar cada 10 mensajes o si se han modificado los datos del perfil
                messages_count = get_session_var(f"thread_{thread_id}_messages_count", 0)
                if messages_count % 10 == 0:
                    client.update_thread_with_profile(thread_id, user_id)
                    logger.info(f"Perfil actualizado en thread existente: {thread_id}")
                
                # Incrementar contador de mensajes
                set_session_var(f"thread_{thread_id}_messages_count", messages_count + 1)
        
        # A√±adir mensaje al thread
        message_response = client.add_message_to_thread(thread_id, user_message)
        
        if not message_response or "id" not in message_response:
            return {
                "error": True,
                "mensaje": "No se pudo a√±adir el mensaje al thread",
                "texto_original": texto_input
            }
            
        logger.info(f"Mensaje a√±adido al thread: {thread_id}")
        
        # Obtener ID del asistente usando el system prompt completo
        try:
            assistant_id = client.get_assistant_id("correccion_texto", SYSTEM_PROMPT_CORRECTION)
            logger.info(f"ID del asistente obtenido: {assistant_id}")
        except Exception as e:
            logger.error(f"Error obteniendo ID del asistente: {str(e)}")
            return {
                "error": True,
                "mensaje": f"Error obteniendo asistente: {str(e)}",
                "texto_original": texto_input
            }
        
        # Ejecutar asistente con las funciones disponibles
        run_response = client._api_request(
            "POST", 
            f"/threads/{thread_id}/runs", 
            data={
                "assistant_id": assistant_id,
                "tools": ASSISTANT_FUNCTIONS,
                # Forzar formato JSON para garantizar estructura
                "response_format": {"type": "json_object"}
            },
            timeout=60
        )
        
        if not run_response or "id" not in run_response:
            return {
                "error": True,
                "mensaje": "Error iniciando la ejecuci√≥n del asistente",
                "texto_original": texto_input
            }
            
        run_id = run_response["id"]
        logger.info(f"Ejecuci√≥n iniciada: {run_id}")
        
        # Esperar a que la ejecuci√≥n se complete
        max_wait_time = 180  # 3 minutos m√°ximo
        start_wait_time = time.time()
        polling_interval = 1
        max_polling_interval = 5
        polling_count = 0
        
        # Bucle de polling para esperar la respuesta
        while True:
            # Verificar timeout
            if time.time() - start_wait_time > max_wait_time:
                return {
                    "error": True,
                    "mensaje": f"La operaci√≥n tard√≥ demasiado tiempo (m√°s de {max_wait_time} segundos)",
                    "texto_original": texto_input
                }
            
            # Consultar estado de la ejecuci√≥n
            run_status_response = client.get_run(thread_id, run_id)
            
            if not run_status_response or "status" not in run_status_response:
                return {
                    "error": True,
                    "mensaje": "Error al verificar el estado de la ejecuci√≥n",
                    "texto_original": texto_input
                }
                
            status = run_status_response["status"]
            polling_count += 1
            
            # Mostrar estado solo cada 5 consultas para reducir ruido en logs
            if polling_count % 5 == 0:
                logger.info(f"Estado de ejecuci√≥n ({polling_count}): {status}")
            
            # Verificar si ha terminado
            if status == "completed":
                logger.info(f"Ejecuci√≥n completada despu√©s de {polling_count} consultas")
                break
                
            # Verificar si ha fallado
            if status in ["failed", "cancelled", "expired"]:
                error_detail = run_status_response.get("last_error", {})
                error_message = error_detail.get("message", "Unknown error")
                return {
                    "error": True,
                    "mensaje": f"La ejecuci√≥n fall√≥: {error_message}",
                    "texto_original": texto_input
                }
            
            # Verificar si requiere acci√≥n (funci√≥n)
            if status == "requires_action":
                logger.info("La ejecuci√≥n requiere acci√≥n (function calling)")
                
                # Procesar llamadas a funciones
                function_success = process_function_calls(assistant_id, thread_id, run_id, client)
                
                if not function_success:
                    return {
                        "error": True,
                        "mensaje": "Error procesando llamadas a funciones",
                        "texto_original": texto_input
                    }
                
                # Continuar con el siguiente ciclo (no dormir)
                continue
            
            # Esperar antes de verificar estado de nuevo
            time.sleep(polling_interval)
            
            # Ajustar intervalo de polling (espera adaptativa)
            polling_interval = min(polling_interval * 1.5, max_polling_interval)
        
        # Obtener mensajes
        messages_response = client.list_messages(thread_id)
        
        if not messages_response or "data" not in messages_response:
            return {
                "error": True,
                "mensaje": "Error al obtener mensajes del thread",
                "texto_original": texto_input
            }
            
        # Buscar el mensaje m√°s reciente del asistente
        assistant_message = None
        for message in messages_response["data"]:
            if message["role"] == "assistant":
                assistant_message = message
                break
        
        if not assistant_message:
            return {
                "error": True,
                "mensaje": "No se encontr√≥ respuesta del asistente",
                "texto_original": texto_input
            }
            
        # Extraer contenido del mensaje
        content_text = ""
        for content_item in assistant_message.get("content", []):
            if content_item["type"] == "text":
                content_text += content_item["text"]["value"]
        
        if not content_text:
            return {
                "error": True,
                "mensaje": "El asistente no gener√≥ una respuesta",
                "texto_original": texto_input
            }
            
        # Extraer JSON del contenido garantizando un an√°lisis profundo
        json_data = extract_json_safely(content_text)
        
        # Si no se pudo extraer JSON o est√° vac√≠o, crear error
        if not json_data or not isinstance(json_data, dict) or "errores" not in json_data:
            return {
                "error": True,
                "mensaje": "No se pudo extraer una respuesta JSON v√°lida del asistente",
                "texto_original": texto_input,
                "respuesta_raw": content_text[:500] + ("..." if len(content_text) > 500 else "")
            }
        
        # A√±adir texto original si no est√° incluido
        if "texto_original" not in json_data:
            json_data["texto_original"] = texto_input
        
        # Verificar estructura m√≠nima del JSON
        categorias_errores = ["Gram√°tica", "L√©xico", "Puntuaci√≥n", "Estructura textual"]
        for categoria in categorias_errores:
            if categoria not in json_data.get("errores", {}):
                # Asegurar que existe la categor√≠a aunque est√© vac√≠a
                json_data.setdefault("errores", {})[categoria] = []
        
        # Aplicar la validaci√≥n de clasificaci√≥n de errores
        json_data = validate_error_classification(json_data)
        logger.info("Validaci√≥n de clasificaci√≥n de errores aplicada")
        
        # Guardar correcci√≥n en Firebase
        if user_id:
            try:
                # Contar errores por categor√≠a
                errores_conteo = {}
                for categoria, lista_errores in json_data.get("errores", {}).items():
                    # Normalizar nombres a min√∫sculas para consistencia
                    errores_conteo[categoria.lower()] = len(lista_errores) if isinstance(lista_errores, list) else 0
                
                # Calcular puntuaci√≥n global
                puntuacion_global = 0
                num_puntuaciones = 0
                
                analisis = json_data.get("analisis_contextual", {})
                for seccion in ["coherencia", "cohesion", "registro_linguistico", "adecuacion_cultural"]:
                    if seccion in analisis and "puntuacion" in analisis[seccion]:
                        try:
                            puntuacion_global += float(analisis[seccion]["puntuacion"])
                            num_puntuaciones += 1
                        except (TypeError, ValueError):
                            pass
                
                # Calcular promedio
                if num_puntuaciones > 0:
                    puntuacion_global = round(puntuacion_global / num_puntuaciones, 1)
                else:
                    puntuacion_global = 5.0  # Valor por defecto
                
                # Guardar en Firebase usando la funci√≥n mejorada
                correction_id = save_correction_with_stats(
                    user_id=user_id,
                    texto_original=texto_input,
                    texto_corregido=json_data.get("texto_corregido", ""),
                    nivel=nivel,
                    errores=errores_conteo,
                    puntuacion=puntuacion_global
                )
                
                if correction_id:
                    logger.info(f"Correcci√≥n guardada con ID: {correction_id}")
                    # A√±adir ID al resultado
                    json_data["correction_id"] = correction_id
                else:
                    logger.warning("No se pudo guardar la correcci√≥n en Firebase")
            except Exception as e:
                logger.error(f"Error guardando correcci√≥n en Firebase: {str(e)}")
                logger.debug(traceback.format_exc())
        
        # Registrar √©xito en circuit breaker
        circuit_breaker.record_success("openai")
        
        # Calcular tiempo total
        elapsed_time = time.time() - start_time
        logger.info(f"Correcci√≥n completada en {elapsed_time:.2f} segundos")
        
        # A√±adir informaci√≥n de thread_id al resultado
        json_data["thread_id"] = thread_id
        
        # Devolver resultado exitoso
        return json_data
        
    except Exception as e:
        # Capturar error general
        error_details = traceback.format_exc()
        logger.error(f"Error general en corregir_texto: {str(e)}")
        logger.debug(f"Detalles del error:\n{error_details}")
        
        # Detectar errores 500 del servidor de OpenAI
        is_server_error = False
        error_str = str(e).lower()
        if "500" in error_str or "internal server error" in error_str:
            is_server_error = True
            logger.warning("Detectado error 500 del servidor OpenAI. Reiniciando thread...")
            # Importar funci√≥n de reinicio
            from core.clean_openai_assistant import reset_thread
            # Reiniciar thread
            new_thread_id = reset_thread(user_id)
            if new_thread_id:
                logger.info(f"Thread reiniciado exitosamente. ID: {new_thread_id}")
                # Mensaje espec√≠fico para errores de servidor
                error_response = {
                    "error": True,
                    "mensaje": "Hubo un problema en el servidor. Se ha reiniciado la sesi√≥n. Por favor, intenta nuevamente.",
                    "texto_original": texto_input if 'texto_input' in locals() else "No disponible",
                    "thread_reiniciado": True
                }
            else:
                # Fall√≥ el reinicio
                error_response = {
                    "error": True,
                    "mensaje": "Error en el servidor de OpenAI. No se pudo reiniciar la sesi√≥n.",
                    "texto_original": texto_input if 'texto_input' in locals() else "No disponible"
                }
        else:
            # Para otros errores, comportamiento est√°ndar
            circuit_breaker.record_failure("openai", error_type=str(type(e).__name__))
            
            # Crear respuesta de error con informaci√≥n √∫til
            error_response = {
                "error": True,
                "mensaje": f"Se produjo un error durante la correcci√≥n: {str(e)}",
                "texto_original": texto_input if 'texto_input' in locals() else "No disponible"
            }
        
        return error_response

def mostrar_resultado_correccion(resultado):
    """
    Muestra el resultado de la correcci√≥n en la interfaz.
    
    Args:
        resultado (dict): Resultado de la correcci√≥n
        
    Returns:
        None
    """
    try:
        # Importaci√≥n local para evitar importaciones circulares
        from features.correccion_utils import display_correccion_result
        
        # Verificar si hay un error en el resultado
        if not resultado:
            st.error("No se recibi√≥ respuesta del servicio de correcci√≥n")
            return
            
        if "error" in resultado and resultado["error"]:
            mensaje_error = resultado.get("mensaje", "Error desconocido durante la correcci√≥n")
            st.error(mensaje_error)
            
            # Si el thread se reinici√≥, mostrar mensaje espec√≠fico
            if resultado.get("thread_reiniciado"):
                st.info("La sesi√≥n ha sido reiniciada debido a un error interno. Por favor, intenta nuevamente tu correcci√≥n.")
            
            # Mostrar respuesta raw si est√° disponible (para diagn√≥stico)
            if "respuesta_raw" in resultado:
                with st.expander("Detalles t√©cnicos (para desarrolladores)"):
                    st.code(resultado["respuesta_raw"])
                    
            # Sugerencias de acciones para el usuario
            st.info("Sugerencias: Intenta con un texto m√°s corto o verifica tu conexi√≥n a internet.")
            
            # Mostrar el texto original si est√° disponible
            if "texto_original" in resultado:
                with st.expander("Tu texto original"):
                    st.write(resultado["texto_original"])
            
            return
        
        # Si no hay error, mostrar el resultado normal
        display_correccion_result(resultado)
        
    except Exception as e:
        # Capturar cualquier error en la visualizaci√≥n
        error_details = traceback.format_exc()
        logger.error(f"Error mostrando resultado: {str(e)}")
        logger.debug(f"Detalles del error:\n{error_details}")
        
        # Mostrar mensaje al usuario
        st.error(f"Error mostrando el resultado: {str(e)}")
        
        # Si tenemos el resultado original, intentar mostrar al menos el texto
        if isinstance(resultado, dict):
            if "texto_corregido" in resultado:
                st.subheader("Texto corregido")
                st.write(resultado["texto_corregido"])
            elif "texto_original" in resultado:
                with st.expander("Tu texto original"):
                    st.write(resultado["texto_original"])
