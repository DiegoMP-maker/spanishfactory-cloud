#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Herramienta de diagn√≥stico para perfiles de estudiantes
-------------------------------------------------------
Este script ejecuta una serie de verificaciones para diagnosticar
por qu√© el sistema podr√≠a estar usando valores predeterminados 
en lugar de datos reales del perfil del estudiante.
"""

import logging
import streamlit as st
import json
import traceback

# Configuraci√≥n de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Importar dependencias necesarias
from core.firebase_client import get_user_data, initialize_firebase, ensure_profile_fields
from core.session_manager import get_user_info, get_session_var
from features.correccion import get_student_profile

def diagnosticar_perfil_estudiante():
    """
    Ejecuta diagn√≥sticos para verificar por qu√© el sistema podr√≠a estar
    usando valores predeterminados en lugar de datos reales del perfil.
    """
    st.title("üîç Diagn√≥stico de Perfil de Estudiante")
    
    # Paso 1: Verificar el usuario actual
    st.subheader("1. Verificaci√≥n del usuario actual")
    user_info = get_user_info()
    
    if user_info:
        user_id = user_info.get("uid")
        email = user_info.get("email")
        st.success(f"‚úÖ Usuario en sesi√≥n: {email} (UID: {user_id})")
    else:
        st.error("‚ùå No hay usuario en sesi√≥n")
        st.warning("Por favor, inicia sesi√≥n para continuar")
        return
    
    # Paso 2: Verificar inicializaci√≥n de Firebase
    st.subheader("2. Verificaci√≥n de conexi√≥n con Firebase")
    db, success = initialize_firebase()
    
    if success and db:
        st.success("‚úÖ Firebase inicializado correctamente")
        
        # Verificar estado en session_state
        if st.session_state.get("firebase_status"):
            st.success("‚úÖ Estado de Firebase en session_state: OK")
        else:
            st.error("‚ùå Estado de Firebase en session_state: Error")
    else:
        st.error("‚ùå Error inicializando Firebase")
        st.info("Revisa las credenciales de Firebase y los logs de la aplicaci√≥n")
        return
    
    # Paso 3: Verificar thread_id en session_state
    st.subheader("3. Verificaci√≥n de thread_id")
    thread_id = get_session_var("thread_id")
    
    if thread_id:
        st.success(f"‚úÖ Thread ID en sesi√≥n: {thread_id}")
    else:
        st.warning("‚ö†Ô∏è No hay thread_id en la sesi√≥n actual")
        st.info("El thread_id se generar√° autom√°ticamente en la primera correcci√≥n")
    
    # Paso 4: Obtener datos directos de Firebase
    st.subheader("4. Datos directos de Firebase")
    
    try:
        user_data_raw = get_user_data(user_id)
        
        if user_data_raw:
            st.success("‚úÖ Datos obtenidos de Firebase")
            
            # Mostrar informaci√≥n relevante
            with st.expander("Ver datos raw de Firebase"):
                # Filtrar datos sensibles antes de mostrar
                filtered_data = {k: v for k, v in user_data_raw.items() 
                               if k not in ['private_key', 'token', 'key', 'password']}
                st.json(filtered_data)
            
            # Verificar campos clave
            nivel_firebase = user_data_raw.get("nivel")
            correcciones_firebase = user_data_raw.get("numero_correcciones")
            
            col1, col2 = st.columns(2)
            
            with col1:
                if nivel_firebase:
                    st.success(f"‚úÖ Nivel en Firebase: {nivel_firebase}")
                else:
                    st.error("‚ùå No se encontr√≥ campo 'nivel' en Firebase")
            
            with col2:
                if correcciones_firebase is not None:
                    st.success(f"‚úÖ Correcciones en Firebase: {correcciones_firebase}")
                else:
                    st.error("‚ùå No se encontr√≥ campo 'numero_correcciones' en Firebase")
        else:
            st.error("‚ùå No se encontraron datos en Firebase para este usuario")
            st.info("Esto puede deberse a problemas de permisos o a que el usuario no existe en Firestore")
    except Exception as e:
        st.error(f"‚ùå Error obteniendo datos de Firebase: {str(e)}")
        st.code(traceback.format_exc())
    
    # Paso 5: Verificar funci√≥n get_student_profile
    st.subheader("5. Verificaci√≥n de get_student_profile")
    
    try:
        perfil = get_student_profile(user_id)
        
        if perfil:
            st.success("‚úÖ Perfil obtenido correctamente")
            
            # Mostrar perfil completo
            with st.expander("Ver perfil completo"):
                st.json(perfil)
            
            # Verificar campos clave
            nivel_perfil = perfil.get("nivel_mcer")
            correcciones_perfil = perfil.get("numero_correcciones")
            
            col1, col2 = st.columns(2)
            
            with col1:
                if nivel_perfil:
                    if nivel_perfil == "B1" and nivel_firebase and nivel_firebase != "B1":
                        st.error(f"‚ùå Nivel en perfil: {nivel_perfil} (Valor por defecto)")
                        st.info(f"No coincide con el valor en Firebase: {nivel_firebase}")
                    else:
                        st.success(f"‚úÖ Nivel en perfil: {nivel_perfil}")
                else:
                    st.error("‚ùå No se encontr√≥ campo 'nivel_mcer' en el perfil")
            
            with col2:
                if correcciones_perfil is not None:
                    if correcciones_perfil == 0 and correcciones_firebase and correcciones_firebase != 0:
                        st.error(f"‚ùå Correcciones en perfil: {correcciones_perfil} (Valor por defecto)")
                        st.info(f"No coincide con el valor en Firebase: {correcciones_firebase}")
                    else:
                        st.success(f"‚úÖ Correcciones en perfil: {correcciones_perfil}")
                else:
                    st.error("‚ùå No se encontr√≥ campo 'numero_correcciones' en el perfil")
        else:
            st.error("‚ùå No se pudo obtener el perfil del estudiante")
    except Exception as e:
        st.error(f"‚ùå Error obteniendo perfil del estudiante: {str(e)}")
        st.code(traceback.format_exc())
    
    # Paso 6: Verificar y reparar campos del perfil
    st.subheader("6. Verificaci√≥n y reparaci√≥n de campos")
    
    if st.button("Verificar y reparar campos del perfil"):
        try:
            actualizado = ensure_profile_fields(user_id)
            
            if actualizado:
                st.success("‚úÖ Se han actualizado campos faltantes en el perfil")
                st.info("Recarga esta p√°gina para ver los cambios")
            else:
                st.success("‚úÖ El perfil ya tiene todos los campos necesarios")
        except Exception as e:
            st.error(f"‚ùå Error al verificar/reparar campos: {str(e)}")
            st.code(traceback.format_exc())
    
    # Paso 7: Conclusiones y soluciones
    st.subheader("7. Conclusiones y soluciones")
    
    # Verificar si hay problemas en el mapeado de campos
    if (nivel_firebase and nivel_perfil == "B1" and nivel_firebase != "B1") or \
       (correcciones_firebase is not None and correcciones_perfil == 0 and correcciones_firebase != 0):
        st.warning("‚ö†Ô∏è Se detect√≥ un problema de mapeo entre los datos de Firebase y el perfil")
        st.info("""
        **Problema detectado**: La funci√≥n `get_student_profile` est√° usando valores predeterminados 
        a pesar de que existen valores reales en Firebase.
        
        **Posibles causas**:
        1. Inconsistencia en los nombres de campos "nivel" vs "nivel_mcer"
        2. El valor en Firebase podr√≠a no estar en el formato esperado
        3. Posible problema en la funci√≥n `get_user_data` de Firebase
        
        **Soluci√≥n recomendada**:
        - Revisar `features/correccion.py` para asegurar que el mapeo de campos sea correcto
        - Revisar `firebase_client.py` para garantizar que devuelva siempre los campos correctos
        """)
    else:
        st.success("‚úÖ No se detectaron problemas de mapeo entre datos de Firebase y perfil")
    
    # Agregar bot√≥n para actualizar manualmente el perfil
    st.subheader("8. Actualizar perfil manualmente")
    
    with st.form("actualizar_perfil"):
        st.write("Actualiza manualmente los valores del perfil (solo para diagn√≥stico)")
        
        nivel_input = st.selectbox(
            "Nivel MCER",
            ["A1", "A2", "B1", "B2", "C1", "C2"],
            index=["A1", "A2", "B1", "B2", "C1", "C2"].index(nivel_perfil if nivel_perfil in ["A1", "A2", "B1", "B2", "C1", "C2"] else "B1")
        )
        
        idioma_input = st.text_input(
            "Idioma nativo",
            value=perfil.get("idioma_nativo", "") if perfil else ""
        )
        
        num_correcciones = st.number_input(
            "N√∫mero de correcciones",
            min_value=0,
            value=perfil.get("numero_correcciones", 0) if perfil else 0
        )
        
        submitted = st.form_submit_button("Actualizar perfil")
        
        if submitted:
            try:
                from core.firebase_client import update_user_profile
                
                # Preparar datos actualizados
                profile_data = {
                    "nivel": nivel_input,
                    "idioma_nativo": idioma_input,
                    "numero_correcciones": int(num_correcciones)
                }
                
                # Actualizar perfil
                success = update_user_profile(user_id, profile_data)
                
                if success:
                    st.success("‚úÖ Perfil actualizado correctamente")
                    st.info("Recarga esta p√°gina para ver los cambios")
                else:
                    st.error("‚ùå Error actualizando el perfil")
            except Exception as e:
                st.error(f"‚ùå Error: {str(e)}")
                st.code(traceback.format_exc())

if __name__ == "__main__":
    diagnosticar_perfil_estudiante()
